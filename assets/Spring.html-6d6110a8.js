import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as a,c as p,b as i,d as l,e as t,f as e}from"./app-c550aa6e.js";const u={},s=i("h1",{id:"spring",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#spring","aria-hidden":"true"},"#"),l(" Spring")],-1),c=i("h2",{id:"ioc-aop",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#ioc-aop","aria-hidden":"true"},"#"),l(" IOC/AOP")],-1),g=e("<li><p>Spring的理解（IOC和AOP）</p><ul><li><p>首先，spring是个庞大的项目，从官网可以看到包括了：</p><ul><li>SpringFramework</li><li>SpringData</li><li>SpringSecurity</li><li>SpringBoot</li><li>SpringCloud</li></ul><p>当然，除了这些之外，Spring还包括很多其他的项目</p></li></ul><p>Spring最主要的有两个特点是IOC和AOP</p><ul><li>IOC: <ul><li>IOC就是控制反转，指的是创建对象控制权的转移，以前创建对象的时候都是自己控制，现在Spring容器会根据配置文件去帮我们创建和管理对象。</li><li>好处：解耦合，对象的属性只需要在配置文件中写，不用在java代码写，把属性与java代码解耦合。</li><li>原理：使用反射机制，根据配置文件信息去创建对象。使用了工厂的设计模式。</li><li>Spring的IOC有三种注入方式 ：构造器注入、setter方法注入、根据注解注入。</li></ul></li><li>AOP: <ul><li>把公共的代码提取出来，进行封装。</li><li>减少系统代码重复量，降低模块耦合度。</li><li>原理：基于动态代理 <ul><li>要代理的对象实现了接口，就用JDK动态代理生成代理类。</li><li>没有实现接口，就用cglib，实现子类的方式生成代理类。</li></ul></li></ul></li></ul></li><li><p>孙帅的IOC和DI</p><ul><li>IOC 控制反转 <ul><li>控制：对于成员变量赋值的控制权</li><li>控制反转：把成员变量赋值的控制权，从代码中反转到Spring工厂和配置文件中完成。</li><li>好处：解耦合</li><li>底层实现：反射加工厂设计模式</li></ul></li><li>DI 依赖注入 <ul><li>当一个类需要另一个类时，就意味着依赖，一旦出现了依赖，那么就可以把另一个类作为本类的成员变量，最终通过Spring配置文件注入。</li></ul></li></ul></li><li><p>类加载器的作用</p><ul><li>通过类加载器把对应class文件加载到JVM</li><li>通过类加载器创建类的Class对象，进而创建这个类的对象 <ul><li>User —&gt; user <ul><li>User类的Class对象 —&gt;new User() —&gt;user</li></ul></li></ul></li><li>如何获取类加载器：每一个.class文件，JVM会自动分配与之对应的ClassLoader</li></ul></li><li><p>代理创建3要素（孙帅）</p><ul><li>原始对象</li><li>额外功能</li><li>代理对象和原始对象实现相同的接口</li></ul></li><li><p>JDK动态代理 （孙帅）</p><ul><li>Proxy.newProxyInstance(classloader,interfacce,invocationhandler)</li><li>为什么JDK动态代理中，该api需要我们传入classloader？ <ul><li>创建代理类的对象需要用到类加载器</li><li>JDK动态代理没有相应的class文件，那么JVM就不会为其分配ClassLoader，所以需要我们为其指定classLoader（借用类加载器）。</li></ul></li></ul></li><li><p>Spring AOP和AspectJ 有什么区别？</p><ul><li>AOP是运行时增强，AspectJ是编译时增强。</li><li>AOP是动态代理方式实现，AspectJ是基于ASM修改字节码。</li><li>AspectJ性能比较好，切面多的话，用AspectJ</li></ul></li><li><p>Spring切面的五种通知类型</p><ul><li>before，前置通知，在方法调用前执行</li><li>after 方法执行后调用</li><li>around 之前之后都执行</li><li>after-returning 方法成功执行完成后执行</li><li>after-throwing 方法执行报错后执行</li></ul></li><li><p>Autowired和Resource关键字的区别？</p><ul><li>共同点： <ul><li>写在字段或者Setter方法上</li><li>都用于bean的注入</li></ul></li><li>不同点： <ul><li>Autowired是Spring 提供的注解，而@Resource是javax包的注解</li><li>Autowired 是ByType来装配对象，如果想ByName可以通过配合@Qualifer使用，而@Resource默认是根据ByName来装配，如果想改为ByType，使用type属性</li></ul></li></ul></li><li><p>Spring bean 的生命周期</p><ul><li>实例化bean：推断构造方法，实例化bean</li><li>设置对象属性（依赖注入）：实例化后的baen被封装到beanWrapper中，完成依赖注入</li><li>处理Aware接口： <ul><li>如果Bean实现了BeanNameAware接口，会调用setBeanName()方法</li><li>如果实现了BeanFactoryAware接口，调用setBeanFactory()方法</li></ul></li><li>BeanPostProcessor <ul><li>如果bean实现了BeanPostProcessor接口，那么会调用postprocessBeforeInitialization()</li></ul></li><li>初始化 <ul><li>如果Bean中的某个方法被@PostConstruct 标记，那么就去调用它</li><li>如果实现了InitializingBean，调用afterPropertiesSet方法</li><li>如果Bean 指定了init-method 方法，那么就去调用它。</li></ul></li><li>如果Bean实现了BeanPostProcessor接口，会调用postProcessAfterInitialization()</li><li>bean不再需要的时候，会被销毁，如果实现了disposableBean接口，那么就调用destory方法。</li></ul></li><li><p>bean的作用域</p><ul><li>singleton：默认，容器只有一个bean</li><li>prototype：每个请求创建一个bean</li><li>request：每个网络请求创建一个bean</li><li>session：每个session创建一个bean</li><li>global-session：global-session跟Portlet应用相关的</li></ul></li><li><p>Spring中单例bean是线程安全的吗</p><ul><li>关于单例bean的线程安全问题需要由开发者自己去控制，Spring并没有做线程安全方面的控制</li></ul></li><li><p>Spring 基于xml注入的方式有哪些</p><ul><li>Set方法注入</li><li>构造器注入</li></ul></li><li><p>Spring如何解决循环依赖问题（简单版本）</p><ul><li>对于普通Java对象，对象之间的依赖问题很好解决，比如X依赖Y，Y依赖X。 <ul><li>X x= new X(); x.setY ();</li><li>Y y=new Y();y.setX()</li></ul></li><li>由于Spring bean 有着复杂的生命周期，所以解决循环依赖问题也稍微麻烦一点，主要影响的是 <ul><li>实例化</li><li>填充属性</li><li>初始化</li></ul></li><li>Spring 使用了三级缓存来解决循环依赖的问题 <ul><li>singletonObjects 用于存放可以直接使用的单例bean</li><li>earlySingletonObjects 用于存放没填充属性的bean</li><li>singletonFactories 存放bean工厂</li></ul></li><li>对于对象A依赖B，对象B依赖A的情况 <ul><li>在对象A实例化后，会提前暴露到earlySingletonObjects</li><li>接着填充属性，发现此时依赖了B，发现没有B，走B的创建过程</li><li>B实例化后，填充属性，发现依赖了A，从earlySingletonObjects 中获取到了未填充属性的A，设置A，完成初始化后把自己放到singletonObjects里</li><li>返回A继续填充B，发现B已经在singletonObjects里面了，直接填充B</li><li>解决了循环依赖问题</li></ul></li><li>前面有提到三级缓存，三级缓存的作用是什么？ <ul><li>三级缓存是用来存储代理 Bean，当调用 getBean()方法时，发现目标 Bean 需要通过代理工厂来创建，此时会将创建好的实例保存到三级缓存，最终也会将赋值好的 Bean 同步到一级缓存中。</li></ul></li><li>Spring 中哪些情况下，不能解决循环依赖问题？ <ul><li>多例 Bean 通过 setter 注入的情况，不能解决循环依赖问题</li><li>构造器注入的 Bean 的情况，不能解决循环依赖问题</li><li>单例的代理 Bean 通过 Setter 注入的情况，不能解决循环依赖问题</li><li>设置了@DependsOn 的 Bean 的情况，不能解决循环依赖问</li></ul></li></ul></li>",13),S={href:"https://www.bilibili.com/video/BV1Ga4y1E7Br",target:"_blank",rel:"noopener noreferrer"},d=e("<ul><li>对于普通的Java对象的循环依赖问题，他们之间是很好解决的，比如X依赖Y，Y依赖X，这种是很好解决的： <ul><li>X x= new X(); x.setY ();</li><li>Y y=new Y();y.setX()</li></ul></li><li>Spring的循环依赖之所以复杂，是因为Spring Bean有着不同于普通Java对象的复杂生命周期，所以要讲一下Spring Bean的生命周期 <ul><li>首先Spring 容器启动后，他会去做一个扫描，扫描之后把他变成BeanDefinition存到一个BeanDefinitionMap中</li><li>然后对这个Map去遍历，并做验证，比如验证是否单例，是否懒加载，是否有depend on，是否抽象等等。</li><li>然后获取当前实例化的类有没有存在单例池中，有没有被提前暴露。如果没有被提前暴露的话，Spring Bean就会被开始创建。</li><li>通过推断构造方法，推断出一个最佳的构造方法，然后通过反射去实例化Java对象</li><li>判断是否做BeanDefinition的合并，Spring容器是否支持循环依赖，如果支持循环依赖的话，会提前暴露一个半成品的Bean到ObjectFactory，存到一个二级缓存Map中。</li><li>做一些属性填充</li><li>做一些Aware接口的回调，比如BeanNameAware，ApplicationContextAware，ClassLoaderAware等等。</li><li>如果实现了PostProcessor接口的话，就做初始化之前的方法回调。</li><li>然后做一些初始化的回调，@PostConstruct，InitializingBean，或者init-method方法。</li><li>如果实现了PostProcessor接口的话，就做初始化之后的方法回调。</li><li>这样的话，整个Spring Bean基本可以满足使用了。把这个Bean放入到单例池。</li></ul></li><li>Spring的循环依赖解决大概： <ul><li>实例化X的时候，首先对X做一些基本的验证，验证完之后，看一下X所对应的ObjectFactory有没有提前暴露，这种时候肯定是没有的 ，接着就推断构造方法。接着就把X实例化出来，X实例化出来就会提前暴露。接着就是X的属性填充，发现了需要填充Y。</li><li>发现Y并没有被实例化，走Y的生命周期过程，发现Y也没有提前暴露，继续走实例化Y，实例化Y后继续往下执行，把Y提前暴露。接着做Y的属性填充，发现需要填充X，但是X并没有在单例池中（X实例化只是走了一半）。</li><li>继续走X的生命周期流程，当走到去二级缓存中找的时候找到了-&gt;往Y中注入X的objectFactory对象-&gt;解决循环依赖。</li></ul></li></ul>",1),B=e('<li><p>Spring 实例化Bean推断构造方法</p><ul><li>如果@Autowired指定了构造方法，那么就使用该构造方法</li><li>如果没有指定 <ul><li>优先使用无参构造</li><li>如果没有无参构造方法，有两个及以上的构造方法，会报错</li></ul></li></ul></li><li><p>Spring事务实现方式</p><ul><li>编程事务</li><li>声明式事务@Transcation</li></ul></li><li><p>Spring事务的传播级别（7个）</p><ul><li>PROPAGATION_REQUIRED：默认的Spring事务传播级别，若当前存在事务就加入事务，没有就创建一个</li><li>PAOPAGATION_REQUIRE_NEW：不管有没有事务都新建一个，新老事务相互独立</li><li>PROPAGATION_SUPPORTS：当前存在事务，就加入其中，没有事务就不走事务</li><li>PROPAGATION_NOT_SUPPORTED：以非事务的方式运行，存在事务就先把事务挂起</li><li>PROPAGATION_MANDATORY：强制事务执行，若当前不存在，则抛出异常</li><li>PROPAGATION_NEVER: 以非事务的方式执行，如果当前存在事务，则抛出异常</li><li>PROPAGATION_NESTED：存在事务，嵌套其中，没有事务，创建一个</li></ul></li><li><p>Spring 事务失效的原因</p><ul><li>数据库存储引擎不支持事务</li><li>异常被捕获，没有抛出异常</li><li>异常类型错误，默认是RuntimeExcetion</li><li>注解所在的方法不是public</li><li>事务类没有被spring容器管理</li><li>事务属性配置不正确，propagation属性配置为不适用事务</li><li>数据源没有加载事务管理器</li><li>发生自调用的情况</li></ul></li><li><p>事务注解的本质原理是什么</p><ul><li>事务注解仅仅代表事务相关的元数据，在运行时被事务基础设施读取并消费，根据这些元数据来配置事务的行为。事务注解主要依赖于Spring AOP，使用了一个事务拦截器，在方法调用前后进行事务增强。</li></ul></li><li><p>Spring 框架中用到了哪些设计模式？</p><ul><li>工厂设计模式 : Spring 使用工厂模式通过 BeanFactory、ApplicationContext 创建 bean 对象。</li><li>代理设计模式 : Spring AOP 功能的实现。</li><li>单例设计模式 : Spring 中的 Bean 默认都是单例的。</li><li>原型模式：Spring Bean 如果配置了prototype模式的话，那么每次都会通过克隆的方式生成新对象。</li><li>模板方法模式 : Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。</li><li>观察者模式: Spring 中的 Event 和 Listener。 <ul><li>spring 事件：ApplicationEvent，该抽象类继承了EventObject 类，JDK 建议所有的事件都应该继承自 EventObject。 <ul><li>spring 事件监听器：ApplicationListener，该接口继承了 EventListener 接口，JDK 建议所有的事件监听器都应该继承EventListener。</li></ul></li></ul></li></ul></li><li><h2 id="beanpostprocessor与beanfactorypostprocessor的区别" tabindex="-1"><a class="header-anchor" href="#beanpostprocessor与beanfactorypostprocessor的区别" aria-hidden="true">#</a> BeanPostProcessor与BeanFactoryPostProcessor的区别</h2></li><li><p>说说Spring 中 ApplicationContext 和 BeanFactory 的区别</p><ul><li>BeanFactory是最原始的接口，提供了最基本的容器功能</li><li>ApplicationContext实现了BeanFactory 接口，对容器的功能做了进一步的扩展，比如 <ul><li>支持了国际化</li><li>支持事件发布与监听</li><li>支持读取环境变量</li></ul></li><li>ApplicationContext的初始化和BeanFactory有一个重大的区别:BeanFactory在初始化容器时，并未实例化Bean,直到第一次访问某个Bean时才实例目标Bean;而ApplicationContext则在初始化应用上下文时就实例化所有的单实例的Bean。因此ApplicationContext的初始化时间会比BeanFactory稍长一些。</li></ul></li><li><p>SpringIOC的启动流程</p><ul><li>IOC 是什么 <ul><li>IOC是控制反转，把对象的控制权转移到ioc容器。应用程序如果需要使用到某个对象实例，直接从 IOC 容器中去获取就行，这样设计的好处是降低了程序里面对象与对象之间的耦合性。</li></ul></li><li>Bean的声明方式 <ul><li>spring声明bean的方式有很多种，可以在xml配置，@Bean注解，@Component，@Service，@Repository等等。</li><li>Spring 在启动的时候会去扫描解析这些bean，然后保存到ioc容器中</li></ul></li><li>ioc的工作流程大致分为两个阶段 <ul><li>ioc的初始化 <ul><li>通过xml配置或者注解配置信息解析生成BeanDefiniton，注册到BeanDefinitonMap</li><li>遍历这个map，走bean的生命周期</li></ul></li><li>ioc容器的使用方式 <ul><li>通过@Autowired自动注入</li><li>通过BeanFactory.getBean() 获取IOC容器的bean</li></ul></li><li>另外，需要注意的是，对于那些指定lazy-init的bean，ioc容器启动的时候不会去实例化它，而是在第一次获取的时候去实例化它，而且ioc容器不会去管理这些bean</li></ul></li></ul></li><li><p>Spring常用的注解</p><ul><li>创建Bean的注解 <ul><li>@Configuration 配合@Bean</li><li>@Component</li><li>@Controller</li><li>@Service</li><li>@Repository</li></ul></li><li>注入属性 <ul><li>@Autowired</li><li>@Qualifier</li><li>@Resource</li><li>@Value</li></ul></li><li>作用域注解 <ul><li>@Scope</li></ul></li><li>配置类相关 <ul><li>@ComponentScan</li><li>@Import</li><li>@PropertySource 指定Properties文件的位置</li></ul></li></ul></li>',10),f=e('<h2 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc" aria-hidden="true">#</a> MVC</h2><ul><li><p>SpringMVC的执行流程</p><ul><li>用户发送请求到前端控制器DispatcherServlet</li><li>前端控制器调用处理映射器HandlerMapping <ul><li>处理映射器根据配置信息生成处理器对象和拦截器对象返回给前端控制器</li></ul></li><li>前端控制器调用处理适配器HandlerAdapter <ul><li>HandlerAdapter经过适配后调用具体的Controller</li><li>Controller返回具体的ModleAndView</li><li>HandlerAdapter把ModelAndView返回给前端控制器</li></ul></li><li>前端控制器把ModelAndView返回给视图解析器 <ul><li>视图解析返回给具体View</li></ul></li><li>前端控制器根据View进行渲染</li></ul><figure><img src="https://secure2.wostatic.cn/static/t389U6kV2nvCArt4EQPNh1/image.png?auth_key=1691509920-opatE8GKiyj7AqtH68dKTc-0-7d4972e51e161611b5c79fefc349ef97" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot" aria-hidden="true">#</a> SpringBoot</h2>',3),A=e("<li><p>为什么使用SpringBoot</p><ul><li>不像Spring一样有复杂的xml配置</li><li>内置Tomcat</li><li>有Starter，简化开发</li><li>最重要的是，自动配置</li></ul></li><li><p>SpringBoot的核心注解</p><ul><li><p>启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：</p><p>@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。</p><p>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源自动配置功能： @SpringBootApplication(exclude ={DataSourceAutoConfiguration.class })。</p><p>@ComponentScan：Spring组件扫描。</p></li></ul></li><li><p>如何理解 Spring Boot 中的 Starter？</p><ul><li>Starter 是启动依赖，它的主要作用有几个: <ul><li>Starter 组件以功能为纬度，来维护对应功能的 jar 包的版本依赖，开发者只需要关心业务层，而无需过多关注版本冲突等问题。</li><li>Starter内部集成了自动装配机制，导入starter相关的jar包，那么这个组件相关的自动配置类会被Spring管理。</li></ul></li><li>Spring官方提供了很多Starter 组件，比如 Redis、 JPA、 MongoDB等等。还有一些第三方会维护一些Starter。官方提供的Starter和第三方提供的Starter主要区别在于命名上。 <ul><li>官方提供的Starter以spring-boot-starter 开头的前缀。</li><li>而第三方提供的Starter以spring-boot-starter 开头的后缀。</li></ul></li></ul></li><li><p>SpringBoot Starter工作原理</p><ul><li>SpringBoot启动的时候会干几件事： <ul><li>会找Starter包下的resources/META-INF/spring.factories文件，扫描配置文件的jar包</li><li>根据spring.factories配置加载AutoConfigure类</li><li>根据@Conditional注解条件，自动注入Bean到容器</li></ul></li></ul></li>",4),b=i("p",null,"如何自定义一个Stater",-1),C={href:"https://bbs.huaweicloud.com/blogs/272493",target:"_blank",rel:"noopener noreferrer"},h=e("<li>定义好需要通过配置类来实例化的Bean，XXXService</li><li>定义好属性类XXXProperties <ul><li>@ConfigurationProperties(prefix = &quot;&quot;)来绑定属性前缀</li></ul></li><li>定义好配置类， <ul><li>类名一般是XXXConfiguration</li><li>EnableConfigurationProperties(XXXProperties.class)</li><li>可以配合Conditional的子类来做条件控制</li></ul></li><li>定义好spring.factories属性文件</li><li>打包上传到本地仓库</li><li>其他项目引入我们自定义的starter模块</li>",6),P=e("<li><p>自动配置原理</p><ul><li>启动类上有一个注解:@SpringBootApplication,他标明该类是一个SpringBoot的启动类，它内部是由3个核心注解组成： <ul><li>@SpringBootConfiguration ，底层还是@Configuration注解</li><li>@ComponentScan，扫描使用该注解的类下的包</li><li>@EnableAutoConfiguration 开启自动配置</li></ul></li><li>@EnableAutoConfiguration 点进去该注解，会发现有两个核心注解： <ul><li>@AutoConfigurationPackage 自动配置包 <ul><li>底层是@Import</li><li>默认情况下，将主配置类下的包及其子包里边的组件扫描到Spring容器中。</li><li>跟@ComponentScan有点像，不过他们扫描的类不同，比如加入了Spring Data JPA，@Entity这个注解就是由@AutoConfigurationPackage 扫描加载的。我们平时用到的@Controlelr，@Service，@Component，@Repository都是由@ComponentScan 扫描配置的。</li></ul></li><li>@Import(AutoConfigurationImportSelector.class) 给IOC容器导入组件 <ul><li>AutoConfigurationImportSelector.class 有getCandidateConfigurations方法，这个方法扫描META-INF/spring.factories 这个文件下所有配置类，将其包装成Properties对象，最后添加到Spring容器里</li></ul></li></ul></li></ul></li>",1),m={href:"https://www.bilibili.com/video/BV1NY411P7VX",target:"_blank",rel:"noopener noreferrer"},_=i("li",null,[i("p",null,"springboot 自动配置")],-1),y=e('<figure><img src="https://secure2.wostatic.cn/static/qHwwyRnxwvqZkGqU6ADLyh/image.png?auth_key=1691509920-hGFpGTZ6vcxj6z7N25cf3U-0-57cc8a281fb55436b8d73df4ff5fb295" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://secure2.wostatic.cn/static/sRtkfPqFFH3g9T2ioKuVJ/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://secure2.wostatic.cn/static/cqQfYiUkACe4e4kyrRqh6a/image.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>在SpringBoot的Main方法中，调用了SpringApplication的run方法，底层的作用是 <ul><li>启动一个Context容器，</li><li>注册源配置类</li><li>递归加载和处理所有的配置类，加载那些被@ComponentScan和@Import标注的类</li></ul></li><li>而源配置类中，有一个@SpringBootApplication，表明是一个SpringBoot的启动类，他是一个由三个注解组成 <ul><li>SpringBootConfiguration，底层是一个@Configuration，表明是一个配置类</li><li>@ComponentScan 该注解具有组件扫描的功能</li><li>@EnableAutoConfiguration 表明开启自动配置功能 <ul><li>@AutoConfigurationPackage ,底层也是@Import注解，导入一个Register类</li><li>@Import(AutoConfigurationImportSelector.class) <ul><li>通过SpringFactories机制加载 spring-boot-autoconfigure-x.x.x.jar包里的spring.factories所配置的自动配置类</li><li>根据@Conditional过滤掉不必要的自动配置类</li></ul></li></ul></li></ul></li></ul>',4);function O(w,I){const n=r("ExternalLinkIcon");return a(),p("div",null,[s,c,i("ul",null,[g,i("li",null,[i("p",null,[l("Spring的循环依赖（子路老师"),i("a",S,[l("https://www.bilibili.com/video/BV1Ga4y1E7Br"),t(n)]),l("）")]),d]),B]),f,i("ul",null,[A,i("li",null,[b,i("ul",null,[i("li",null,[i("a",C,[l("https://bbs.huaweicloud.com/blogs/272493"),t(n)])]),h])]),P,i("li",null,[i("p",null,[i("a",m,[l("https://www.bilibili.com/video/BV1NY411P7VX"),t(n)]),l(" springboot自动配置")])]),_]),y])}const E=o(u,[["render",O],["__file","Spring.html.vue"]]);export{E as default};
