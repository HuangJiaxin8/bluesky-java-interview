import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as t,c as u,b as l,d as n,e as i,f as E}from"./app-a0ba2b3f.js";const a={},A=l("h1",{id:"mysql",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#mysql","aria-hidden":"true"},"#"),n(" MySQL")],-1),s=l("h2",{id:"基础",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#基础","aria-hidden":"true"},"#"),n(" 基础")],-1),B={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_1-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%89%E8%8C%83%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},d=l("ul",null,[l("li",null,"第一范式：列不可拆分，即原子性"),l("li",null,"第二范式：行记录唯一，即唯一性"),l("li",null,"第三范式：不可派生，即如果两个列通过计算可以得到第三列，那么不需要设置第三列。"),l("li",null,"备注：第三范式已经过时，有时候为了效率多设置一个列，可以牺牲第三范式，达到空间换时间的目的")],-1),_={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_2-mysql-%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E",target:"_blank",rel:"noopener noreferrer"},c=l("ul",null,[l("li",null,"说说常见的innodb和myisam吧，说说他们的区别"),l("li",null,[n("区别： "),l("ul",null,[l("li",null,"innodb支持事务、主键、外键，myisam不支持"),l("li",null,"innodb支持行级锁和表级锁，而myisam只支持表级锁"),l("li",null,"myisam内部有存储表行数的变量，而innodb没有")])])],-1),h={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_3-%E8%B6%85%E9%94%AE%E3%80%81%E5%80%99%E9%80%89%E9%94%AE%E3%80%81%E4%B8%BB%E9%94%AE%E3%80%81%E5%A4%96%E9%94%AE%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},p=l("ul",null,[l("li",null,"不背")],-1),F={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_4-sql-%E7%BA%A6%E6%9D%9F%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},w=l("ul",null,[l("li",null,"NotNull，unique，主键，外键，check")],-1),C={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_5-mysql-%E4%B8%AD%E7%9A%84-varchar-%E5%92%8C-char-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},f=l("ul",null,[l("li",null,"char是定长的字符，比如我们申请了char(10),无论插入多长数据都占用10个字符、"),l("li",null,"varchar是可变长的字符，数字代表的是最大字符数，实际占用是实际长度+1，最后一个字符记录的是字符长度"),l("li",null,"速度上看，char>varchar。")],-1),y={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_6-mysql%E4%B8%AD-in-%E5%92%8C-exists-%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"},g=l("ul",null,[l("li",null,"暂时不背")],-1),D={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_7-drop%E3%80%81delete%E4%B8%8Etruncate%E7%9A%84%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"},L=l("ul",null,[l("li",null,"delete是DML语言，所以支持事务，drop和truncate是DDL语言，语句不支持事务"),l("li",null,"drop是删除整张表，truncate删除全部数据，不删除表结构，而delete可以删除部分数据。"),l("li",null,"速度上看，drop>truncate>delete")],-1),b={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_8-%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%9F%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},M=l("ul",null,[l("li",null,"预编译的SQL语句"),l("li",null,"但不推荐使用，不好维护和迁移")],-1),S={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_9-mysql-%E6%89%A7%E8%A1%8C%E6%9F%A5%E8%AF%A2%E7%9A%84%E8%BF%87%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},Q=l("ul",null,[l("li",null,"客户端TCP链接到连接器，这个阶段会做身份校验和资源分配"),l("li",null,"查缓存"),l("li",null,"语法分析，检查SQL语句是否写错了，表和表数据是否存在，别名是否有歧义等"),l("li",null,"优化，是否使用了索引"),l("li",null,"执行器执行，把结果集查询出来然后保存到缓存")],-1),m=E('<li><ol start="10"><li>MySQL常用的函数有哪些</li></ol><ul><li>avg()平均数</li><li>sum()总数</li><li>max()最大</li><li>min()最小</li><li>abs() 绝对值</li><li>concat(&#39;a&#39;,&#39;b&#39;)</li><li>replace(str,old,new)</li></ul></li><li><p>查询语句不同元素执行先后顺序？</p><ul><li>where</li><li>group by</li><li>having</li><li>select</li><li>distinct</li><li>order by</li><li>limit</li></ul></li><li><p>count 性能哪种更好</p><ul><li>count(*) = count(1) &gt; count(主键) &gt; count （字段）</li><li>count(1) : <ul><li>如果表里只有主键索引，没有二级索引时，那么，InnoDB 循环遍历聚簇索引。</li><li>如果有二级索引，就遍历二级索引。</li></ul></li><li>count(<code>*</code>) <ul><li>其实等于 count(<code>0</code>)，也就是说，当你使用 count(<code>*</code>) 时，MySQL 会将 <code>*</code> 参数转化为参数 0 来处理。</li><li>count(*) 执行过程跟 count(1) 执行过程基本一样的</li></ul></li><li>count(主键) <ul><li>如果表里只有主键索引，没有二级索引时，那么，InnoDB 循环遍历聚簇索引。</li><li>如果有二级索引，就遍历二级索引。</li></ul></li><li>count(普通字段) <ul><li>全表扫描，最慢</li></ul></li></ul></li><li><p>having和where 有什么区别</p><ul><li>where是在结果集返回之前的过滤，having是在结果集返回之后的过滤。</li><li>having通常配合group by一起使用，用于分组后的过滤</li><li>where 不能使用聚合函数以及聚合函数的别名，having可以 <ul><li>select goods_category_id , avg(goods_price) as ag from sw_goods group by goods_category having ag &gt; 1000</li><li>select goods_category_id , avg(goods_price) as ag from sw_goods where ag&gt;1000 group by goods_category //报错！！因为from sw_goods 这张数据表里面没有ag这个字段</li></ul></li></ul></li><li><p>union 和 union all 有什么区别</p><ul><li>union 对于重复的记录会去重，union all不会</li><li>union默认会按照字段的顺序排序，union all 不会</li><li>结论：UNION去重且排序，UNION ALL不去重不排序</li></ul></li><li><p>left join ，right join，inner join的区别</p><ul><li>left join 返回左表的所有记录和右边匹配到的记录</li><li>right join 返回右表的所有记录和左表匹配到的记录</li><li>inner join 返回左右两张表共同匹配的部分</li></ul></li><li><p>TIMESTAMP 与 DATETIME 的区别</p><ul><li>相同点： <ul><li>TIMESTAMP 列的显示格式与 DATETIME 列相同。格式为YYYY-MM-DD HH:MM:SS。</li></ul></li><li>不同点： <ul><li>TIMESTAMP： <ul><li>4个字节存储，时间范围：1970-01-01 08:00:01~2038-01-19 11:14:07</li><li>值以UTC格式保存，涉及时区转化，存储时对当前的时区进行转换，检索时再转换回当前的时区</li></ul></li><li>DATETIME <ul><li>8个字节存储，时间范围：1000-10-01 00:00:00~9999-12-31 23:59:59</li><li>实际格式存储，与时区无关</li></ul></li></ul></li></ul></li>',7),v=l("h2",{id:"索引",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#索引","aria-hidden":"true"},"#"),n(" 索引")],-1),k={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_1-%E7%B4%A2%E5%BC%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},j=l("ul",null,[l("li",null,"一种能方便我们加快查询速度的数据结构 ，底层采用的是b+树"),l("li",null,"是一个文件，占据物理空间")],-1),x={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_2-%E7%B4%A2%E5%BC%95%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},q=l("ul",null,[l("li",null,"优点：加快查询速度"),l("li",null,[n("缺点： "),l("ul",null,[l("li",null,"每次表增删改，都要重新建立索引，耗时"),l("li",null,"占用物理空间")])])],-1),I={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_3-mysql%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},T=l("ul",null,[l("li",null,"普通索引"),l("li",null,"唯一索引"),l("li",null,"联合索引"),l("li",null,"聚簇索引"),l("li",null,"非聚簇索引"),l("li",null,"全文索引")],-1),N={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_4-%E8%AF%B4%E4%B8%80%E8%AF%B4%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},R=l("ul",null,[l("li",null,"说我们常见的B+树索引吧"),l("li",null,"B+树数据都在叶子节点上，并且增加了顺序访问指针，每个叶子节点都指向相邻的叶子节点的地址。"),l("li",null,"进行范围查找时只需要查找两个节点，进行遍历即可。")],-1),V=l("li",null,[l("p",null,"B树和B+树的区别"),l("ul",null,[l("li",null,"B树内部节点和叶子节点都存放数据，而B+树内部节点存放的是key值，叶子节点才存放数据"),l("li",null,"B+树叶子节点有顺序访问指针，B树没有")])],-1),O={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_5-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8btree%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AFb-tree%EF%BC%8Chash%EF%BC%8C%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8C%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},U=E("<ul><li>不是BTree： <ul><li>B+树 高度低，比较矮胖，能够减少IO</li><li>数据都存在叶子节点，方便扫库，适用于范围查询。B树分支节点都存储数据，每次扫库的时候都要通过中序遍历来扫。</li></ul></li><li>Hash： <ul><li>没有顺序，天然不支持范围查询</li><li>更适用于等值运算</li><li>重复数据多，哈希碰撞严重，效率会很低</li></ul></li><li>二叉树： <ul><li>树高度不平衡，不能自平衡，IO代价高</li></ul></li><li>红黑树： <ul><li>高度随数据量的增加而增加，IO代价高</li></ul></li></ul>",1),z={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_6-%E8%AE%B2%E4%B8%80%E8%AE%B2%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E4%B8%8E%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},P={href:"https://juejin.cn/post/6844903845554814983",target:"_blank",rel:"noopener noreferrer"},H={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_7-%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E4%B8%80%E5%AE%9A%E4%BC%9A%E5%9B%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%90%97%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},K=l("ul",null,[l("li",null,"不一定，如果是覆盖索引就不会回表查询")],-1),Y={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_8-%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%BA%8F%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},G=l("ul",null,[l("li",null,"联合索引(A,B,C),按A排序，A相等，按B排序，B相等，按C排序")],-1),Z={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_9-%E8%AE%B2%E4%B8%80%E8%AE%B2mysql%E7%9A%84%E6%9C%80%E5%B7%A6%E5%89%8D%E7%BC%80%E5%8E%9F%E5%88%99",target:"_blank",rel:"noopener noreferrer"},J=l("ul",null,[l("li",null,"举例子")],-1),W={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_10-%E8%AE%B2%E4%B8%80%E8%AE%B2%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},X=l("ul",null,[l("li",null,"有些字段非常长，但是想建立索引，我们可以提取公共部分作为索引，这样速度会快很多"),l("li",null,"但是，我们需要注意，order by不支持前缀索引 。"),l("li",null,[n("步骤： "),l("ul",null,[l("li",null,"先计算完整列的选择性"),l("li",null,"再计算不同前缀长度的选择性"),l("li",null,"找到最优长度之后，创建前缀索引")])])],-1),$={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_11-%E4%BA%86%E8%A7%A3%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8%E5%90%97%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},ll={href:"https://zhuanlan.zhihu.com/p/121084592",target:"_blank",rel:"noopener noreferrer"},nl={href:"https://www.cnblogs.com/three-fighter/p/15246577.html",target:"_blank",rel:"noopener noreferrer"},el=l("ul",null,[l("li",null,"举个例子，有个user表，字段id，name，age，address。该表有个复合索引(name,age)"),l("li",null,"有个sql语句：select * from user where name like 陈% and age =20 ，"),l("li",null,"没有索引下推的时候，会先查找非聚簇索引，查出符合 陈开头的所有索引行，然后再去查聚簇索引的所有数据，然后再过滤掉age 不等于20的数据"),l("li",null,"开启索引下推的时候，查找非聚簇索引，查出陈开头的所有行，然后继续判断该索引有没有age的字段，有的话，继续过滤掉age不等于20的索引行。然后再去查聚簇索引的数据。"),l("li",null,"5.6引入了索引下推，默认开启，可以通过配置关闭"),l("li",null,[n("优点： "),l("ul",null,[l("li",null,"可以减少回表次数"),l("li",null,"在innodb只针对二级索引有效")])])],-1),il={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_12-%E6%80%8E%E4%B9%88%E6%9F%A5%E7%9C%8Bmysql%E8%AF%AD%E5%8F%A5%E6%9C%89%E6%B2%A1%E6%9C%89%E7%94%A8%E5%88%B0%E7%B4%A2%E5%BC%95%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},El=l("ul",null,[l("li",null,"explain语句")],-1),ol={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_13-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AE%98%E6%96%B9%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E8%87%AA%E5%A2%9E%E9%95%BF%E4%B8%BB%E9%94%AE%E4%BD%9C%E4%B8%BA%E7%B4%A2%E5%BC%95%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},rl=l("ul",null,[l("li",null,"减少B+树的分裂和移动的频率。")],-1),tl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_14-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},ul=l("ul",null,[l("li",null,"建表语句"),l("li",null,"alter table 命令")],-1),al={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_15-%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},Al=l("ul",null,[l("li",null,"非空字段：应该指定列为NOT NULL，提高效率"),l("li",null,"取值离散大的字段"),l("li",null,"索引字段越小越好")],-1),sl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_16-%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8E%9F%E5%88%99%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},Bl=l("ul",null,[l("li",null,"最左匹配原则，其中=和in可以乱序"),l("li",null,"尽量使用区分度高的列作为索引"),l("li",null,"索引列不要参与计算"),l("li",null,"尽量扩展索引不要新增索引"),l("li",null,"非空字段指定为NOT NULL约束")],-1),dl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_17-%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E6%9F%A5%E8%AF%A2%E4%B8%80%E5%AE%9A%E8%83%BD%E6%8F%90%E9%AB%98%E6%9F%A5%E8%AF%A2%E7%9A%84%E6%80%A7%E8%83%BD%E5%90%97%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},_l={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_18-%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8D%E8%B5%B0%E7%B4%A2%E5%BC%95%EF%BC%88%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%EF%BC%89%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},cl=l("ul",null,[l("li",null,"！ = 和<> 、or，not in 、not exists、 函数、操作运算符"),l("li",null,"类型不一致，发生隐式转换"),l("li",null,"模糊索引%和复合索引没有遵守最左匹配")],-1),hl=E('<li><ol start="19"><li>主键与索引有什么区别？null值，约束，唯一</li></ol><ul><li>主键一定会创建一个唯一索引</li><li>主键不允许null值，但是唯一索引可以</li><li>主键是一种约束，唯一索引是一种索引</li><li>一个表只有一个主键，但是可以多个唯一索引</li></ul></li><li><p>复合索引范围查询右边失效</p><ul><li>mysql中索引底层是B+树，它的叶子节点是有序的，而单列索引中，可以很好的排序。</li><li>而联合索引中，他是怎么排序的呢？比如联合索引（A,B）,B会依赖于A进行排序，如果如果A进行了范围查询，那么B字段没办法依赖A的排序，导致B无序了。那么它就不能用二分查找法查找到b的值了。</li></ul></li><li><p>MySQL的聚簇索引和非聚簇索引</p><ul><li>MySQL的索引是跟存储引擎是相关的 <ul><li>innodb中索引跟数据都放在idb文件中</li><li>myisam的索引放在myi中，数据文件放到myd文件中</li></ul></li><li>innodb插入数据的时候 <ul><li>会跟主键索引放到一起，是聚簇索引。</li><li>其他索引只是存放主键的位置，通过主键的位置去查找数据。</li></ul></li></ul></li><li><p>MySQL的聚簇索引和非聚簇索引</p><ul><li>聚集索引就是基于主键创建的索引，除了主键，其他索引都叫非聚集索引，也叫二级索引</li><li>因为在innodb引擎中，一张表的数据对应的物理文件，本身就是按照B+树来组织的，而聚集索引就是按照每张表的组件来构建这样一个B+树，然后叶子节点存储了这个表里面的每一行数据记录。</li><li>所以基于Innodb这样的一个特征，聚集索引并不仅仅是一种索引类型，还代表了一种数据的存储方式，同时也意味着表里必须要有一个主键，如果没有，MySQL会默认给一个隐藏列作为主键。</li><li>非聚集索引来查询一条数据的时候，由于不存放数据，最终还是要对聚集索引来检索。</li></ul></li><li><p>innodb里面只能存在一个聚集索引</p><ul><li>如果存在多个聚集索引，那么意味着表里面数据会存在多个副本，造成磁盘空间的浪费</li></ul></li><li><p>索引设计原则</p><ul><li>给查询的列加上索引</li><li>表的量小就别加索引</li><li>频繁增删改的字段就别加索引</li><li>索引的字段长度越短越好，比如可以用前缀索引</li><li>创建索引的列不要太多，可以用组合索引</li><li>大文本、大对象不要创建索引</li></ul></li><li><p>MySQL 普通索引和唯一索引哪个读写性能高一点</p><ul><li>读性能：唯一索引略快，因为是唯一的，读到一个直接返回。</li><li>写性能：唯一索引略慢，因为写入的时候需要保证唯一性，需要额外的性能消耗。</li></ul></li>',7),pl=l("p",null,"b+树 三层 最多存多少数据",-1),Fl=l("li",null,"1170 * 1170 * 16 = 21902400",-1),wl={href:"https://zhuanlan.zhihu.com/p/379092178",target:"_blank",rel:"noopener noreferrer"},Cl=l("h2",{id:"数据库事务",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#数据库事务","aria-hidden":"true"},"#"),n(" 数据库事务")],-1),fl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_1-%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},yl=l("ul",null,[l("li",null,"不可分割的数据库操作序列，数据库并发控制的基本单位，执行结果必须是一种一致性到另一种一致性"),l("li",null,"多条sql语句要么一起成功要么一起失败"),l("li",null,"举例：转账")],-1),gl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_2-%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E4%BA%8B%E5%8A%A1%E5%85%B7%E6%9C%89%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%89%B9%E5%BE%81",target:"_blank",rel:"noopener noreferrer"},Dl=l("ul",null,[l("li",null,"A：atomicity 原子性，同一事务要么成功要么不成功"),l("li",null,"C：consistency 一致性，事务一提交成功，数据库就要处于一致性状态"),l("li",null,"I ：isolation隔离性 ，不同事务之间相互隔离不影响"),l("li",null,"D：durability 持久性，事务一旦成功，数据的改变就应该是永久的")],-1),Ll={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_4-%E4%BB%80%E4%B9%88%E6%98%AF%E8%84%8F%E8%AF%BB%EF%BC%9F%E5%B9%BB%E8%AF%BB%EF%BC%9F%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},bl=l("ul",null,[l("li",null,"脏读：事务A读到了事务B的数据，然后事务B回滚，那么A读到的就是脏数据。"),l("li",null,"不可重复读：事务A多次读取同一数据，事务B对在事务A多次读取过程中，对数据进行修改，导致事务A读取到的数据不一致"),l("li",null,"幻读：跟不可重复度类似，不过不可重复读针对的是数据的修改，幻读针对的是数据行的增加删除。")],-1),Ml={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_5-%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86",target:"_blank",rel:"noopener noreferrer"},Sl=l("ul",null,[l("li",null,"基于redo log（重做日志）和undo log（回滚日志）实现"),l("li",null,"每提交一个事务必须先将该事务的所有日志写入到重做日志文件进行持久化，数据库就可以通过重做日志来保证事务的原子性和持久性。"),l("li",null,"每当有修改事务时，还会产生 undo log，如果需要回滚，则根据 undo log 的反向语句进行逻辑操作，比如 insert 一条记录就 delete 一条记录。undo log 主要实现数据库的一致性。")],-1),Ql=l("li",null,[n("MySQL 的事务 ACID 是通过什么方式实现的 "),l("ul",null,[l("li",null,"原子性是通过undo log 实现的，需要回滚的时候，撤销执行成功的SQL"),l("li",null,"一致性是由其他三大特性解决的"),l("li",null,"隔离性是通过MVCC控制的"),l("li",null,"持久性是通过redo log保证的，mysql修改数据的时候会在redo log记录一份日志，就算数据没有保存，日志保存成功，数据也不会丢失")])],-1),ml=l("li",null,[n("MySQL 如何实现原子性 "),l("ul",null,[l("li",null,[n("原子性是通过undo log实现，undo log 也叫回滚日志，但需要回滚的时候，那么就可以把undo log里面的语句记录做一下反向操作就行了。 "),l("ul",null,[l("li",null,"比如，insert 一条语句就delete 一条语句；update新值就update旧值。")])])])],-1),vl=l("h2",{id:"日志文件",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#日志文件","aria-hidden":"true"},"#"),n(" 日志文件")],-1),kl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_6-mysql%E4%BA%8B%E5%8A%A1%E6%97%A5%E5%BF%97%E4%BB%8B%E7%BB%8D%E4%B8%8B%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},jl=l("ul",null,[l("li",null,[n("redo log "),l("ul",null,[l("li",null,"事务执行过程中，就会把日志记录到里面。如果某个时间点mysql宕机了，那么重启后，mysql会根据redo log 重做未落盘的部分。保证了事务的持久性。")])]),l("li",null,[n("undo log "),l("ul",null,[l("li",null,"undo log 记录事务的上一个版本记录，用于MVCC的实现，保证了事务的隔离性。")])])],-1),xl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_7-%E4%BB%80%E4%B9%88%E6%98%AFmysql%E7%9A%84-binlog%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},ql=l("ul",null,[l("li",null,"bin log记录的是表结构和表数据变化，不会记录select和show的语句。"),l("li",null,"事件形式记录，包含语句所耗时，主要目的复制和恢复。"),l("li",null,[n("binlog有三种格式： "),l("ul",null,[l("li",null,"statement 基于SQL语句"),l("li",null,"row 基于行，记录的是行变化"),l("li",null,"mixed 混合模式，根据情况来选择statement还是row")])])],-1),Il={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_8-%E5%9C%A8%E4%BA%8B%E5%8A%A1%E4%B8%AD%E5%8F%AF%E4%BB%A5%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%90%97%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},Tl=l("strong",null,"8. 在事务中可以混合使用存储引擎吗？",-1),Nl=l("ul",null,[l("li",null,"尽量不要同一个事务使用到不同的存储引擎"),l("li",null,"如果一个事务中使用了事务型和非事务型的表，那么事务正常提交没有问题"),l("li",null,"但是要是事务发生回滚，会导致事务型的表回滚了，非事务型的表没有回滚，导致数据库处于不一致状态")],-1),Rl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_9-mysql%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%9A%84",target:"_blank",rel:"noopener noreferrer"},Vl=l("ul",null,[l("li",null,"本来可以选择是串行化的隔离级别，这样就不会有幻读问题，但是这种隔离级别相当于单线程，效率低。"),l("li",null,"MySQL使用了可重复读，通过行锁+间隙锁的组合next-key实现，解决了幻读问题。")],-1),Ol={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_10-%E4%BB%80%E4%B9%88%E6%98%AF-mvcc%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},Ul=l("ul",null,[l("li",null,"MVCC多版本并发控制。"),l("li",null,"MVCC 的目的为了解决读写冲突，提高Mysql的并发性能。"),l("li",null,"保证了事务的隔离性。")],-1),zl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_11-mvcc-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86",target:"_blank",rel:"noopener noreferrer"},Pl=l("ul",null,[l("li",null,"InnoDB 每一行数据都有一个隐藏的回滚指针，指向上一个历史版本，这个历史版本存放在 undo log 中。"),l("li",null,"一个事务在执行更新操作时，其它事务此时需要查询时，会查询上一个历史版本记录。这样保证了读写不冲突，提高了Mysql并发性能。")],-1),Hl=l("h2",{id:"事务隔离级别",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#事务隔离级别","aria-hidden":"true"},"#"),n(" 事务隔离级别")],-1),Kl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_3-%E8%AF%B4%E4%B8%80%E4%B8%8Bmysql-%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB",target:"_blank",rel:"noopener noreferrer"},Yl=l("ul",null,[l("li",null,"读未提交：会产生 脏读、不可重复读、幻读"),l("li",null,"读已提交：会产生 不可重复度，幻读"),l("li",null,"可重复读：会产生 幻读，MySQL默认的隔离级别，但MySQL通过mvcc解决幻读"),l("li",null,"串行化：强制事务之间以顺序的形式执行，不会有并发事务问题")],-1),Gl=E("<li>MySQL默认隔离级别是可重复读，它会有幻读吗？没有的话是如何解决幻读 <ul><li>SELECT查询分为快照读和实时读</li><li>快照读： <ul><li>通过MVCC来解决，MVCC是多版本并发控制，通过快照，一个事务在做更新操作的时候，另一个事务在读取的时候，读的是上一个版本的数据</li></ul></li><li>实时读： <ul><li>通过Next-Key Lock来解决幻读问题。</li><li>Next-Key Lock是Gap Lock（间隙锁）和Record Lock（行锁）的结合版。</li><li>比如，select * from id&gt;100 for update <ul><li>会给主键id=100的记录加上record行锁</li><li>主键id会加上gap锁，锁住id(100,+无穷大）的范围</li><li>其他事务对id&gt;=100范围的记录读和写操作都将被阻塞</li><li>这样就可以阻止其他事务修改该范围的数据，保证了不会出现幻读</li></ul></li></ul></li></ul></li>",1),Zl=l("h2",{id:"锁",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#锁","aria-hidden":"true"},"#"),n(" 锁")],-1),Jl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_1-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%8A%A0%E9%94%81",target:"_blank",rel:"noopener noreferrer"},Wl=l("ul",null,[l("li",null,"多用户环境保证数据库完整性和一致性"),l("li",null,"当多个用户并发存取数据时，在数据库就会产生多个事务存取同一数据的情况。如果对并发操作不加以控制可能会导致数据不正确，破坏一致性。")],-1),Xl={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_2-%E6%8C%89%E7%85%A7%E9%94%81%E7%9A%84%E7%B2%92%E5%BA%A6%E5%88%86%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%81%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},$l=l("ul",null,[l("li",null,"行级锁：Mysql中粒度最细的锁，发生冲突概率低，并发高，但开销大。行级锁分为排它锁和共享锁。"),l("li",null,"表级锁：Mysql锁粒度最大，对整张表加锁，开销小，不会出现死锁，发生冲突的概率最大，并发度低。"),l("li",null,"页级锁：介于表级锁和行级锁之间的一种锁")],-1),ln={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_3-%E4%BB%8E%E9%94%81%E7%9A%84%E7%B1%BB%E5%88%AB%E4%B8%8A%E5%88%86mysql%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E9%94%81%E5%91%A2%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},nn=l("ul",null,[l("li",null,[n("锁的类别上分的话，分为共享锁和排它锁 "),l("ul",null,[l("li",null,"共享锁：又叫读锁。读数据的时候，加上共享锁，可以多加几个。"),l("li",null,"排他锁：又叫写锁。写数据的时候，加上排他锁，只可以加一个，与其他排他锁，共享锁互斥。")])])],-1),en={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_4-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},En=l("ul",null,[l("li",null,"乐观锁和悲观锁是数据库并发控制中采用的主要技术手段"),l("li",null,"乐观锁：假设不会发生并发冲突，只是提交的时候检查一下数据的完整性，修改的时候给事务上锁，通过version的方式进行锁定。实现的方式有：CAS或加上版本号。"),l("li",null,"悲观锁：假设会发生并发冲突，屏蔽一切可能会违反数据完整性的一切操作。在查询完数据的时候就把事务锁起来，直到提交事务。实现方式：数据库锁机制。")],-1),on={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_5-innodb%E5%BC%95%E6%93%8E%E7%9A%84%E8%A1%8C%E9%94%81%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},rn=l("ul",null,[l("li",null,"基于索引来实现的，如果sql语句不走索引，那么锁升级会表锁")],-1),tn={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_6-%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%BB%E9%94%81%EF%BC%9F%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},un=l("ul",null,[l("li",null,"死锁是两个事务，相互占用对方的资源却相互请求，导致恶性循环的现象。"),l("li",null,[n("一个有趣的例子： "),l("ul",null,[l("li",null,"面试官：如果你能回答什么是死锁，我就录取你。"),l("li",null,"面试者：如果你录取我，我就给你回答什么是死锁。")])]),l("li",null,[n("常见的方式： "),l("ul",null,[l("li",null,"如果不同程序会存取多个表，尽量约定以相同的顺序访问表。"),l("li",null,"在同一个事务，尽可能做到一次锁定所有的请求资源。"),l("li",null,"对于非常容易死锁的业务，可以通过锁升级为表锁的方式。")])])],-1),an={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_7-%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8E%E9%94%81%E7%9A%84%E5%85%B3%E7%B3%BB",target:"_blank",rel:"noopener noreferrer"},An=l("ul",null,[l("li",null,"Read Uncommitted 读数据不加共享锁"),l("li",null,"Read committeed 读数据加共享锁，读取完成后释放"),l("li",null,"Repeatable Read 读数据加排他锁，事务完成后释放"),l("li",null,"SERIALIZABLE 锁定整个范围的键，事务完成后释放")],-1),sn={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_8-%E4%BC%98%E5%8C%96%E9%94%81%E6%96%B9%E9%9D%A2%E7%9A%84%E6%84%8F%E8%A7%81%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},Bn=l("ul",null,[l("li",null,"使用较低的隔离级别"),l("li",null,"设计索引，尽量使用索引去访问数据"),l("li",null,"合理选择事务的大小，给记录显示加锁，最后一次性请求足够多的资源"),l("li",null,"数据查询的时候，不是非必要，不要上锁。MySQL的MVCC可以实现事务中查询不用加锁，优化事务性能。注意：MVCC 只在Read Commiteed 和 Repeatable Read 的时候生效。")],-1),dn=E("<li><p>9什么是Mysql锁升级？（PDF）</p><ul><li>MySQL行锁只能加在索引上，如果操作不走索引，那么会升级为表锁。</li><li>当非唯一索引重复记录超过表记录的一半时候，行锁也会升级为表锁，因为它底层会索引失效，自然不走行锁。</li></ul></li><li><p>innodb有哪些锁</p><ul><li>行锁 <ul><li>行锁分为共享锁和排他锁</li><li>共享锁加锁方式：select * from table where xxx for share;</li><li>排他锁加锁方式：select * from table where xxx for update;</li></ul></li><li>表锁/意向锁 <ul><li>表级锁又叫做意向锁，指示事务稍后对表中的行需要哪种类型的锁（排他锁或共享锁）。所以又分为两种类型的意向锁。</li></ul></li><li>记录锁Record Locks ：记录锁是对索引记录的锁定 <ul><li>select c1 from t where c1 = 10 for update;</li><li>表示防止任何其他事务插入、更新或删除t.c1=10的行。</li></ul></li><li>间隙锁Gap Locks ：记录锁是对索引记录的锁定 <ul><li>select c1 from t where c1 between 10 and 20 for update;</li><li>表示防止其他事务动（插入、更新或删除）t.c1在10～20中的记录。</li></ul></li><li>下一个键锁/临界锁 Next-Key Locks <ul><li>是索引记录上的记录锁和索引记录之前的间隙上的间隙锁的组合。即Next-Key Lock 包含 Record Lock 和 Gap Lock。</li><li>默认情况下，InnoDB在可重复读取事务隔离级别下运行。在这种情况下，InnoDB使用next key lock进行搜索和索引扫描，从而防止幻读。</li></ul></li><li>插入意向锁Insert Intension Locks <ul><li>插入意向锁是在行插入之前由插入操作设置的一种间隙锁。</li></ul></li><li>自增锁 <ul><li>AUTO-INC锁是一种特殊的表级锁，由插入到具有自动增量列的表中的事务使用。</li></ul></li></ul></li><li><p>数据库如何用到CAS机制</p><ul><li>在表中有一个字段value</li><li>然后第一次拿的时候，去记录一下第一次拿的value值</li><li>执行更新操作的时候，去拿一下value，判断是否改变，如果没改变就直接更新</li><li>但是这样会有ABA的问题，我们可以在加一个版本号字段解决</li></ul></li>",3),_n=l("h2",{id:"sql调优",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#sql调优","aria-hidden":"true"},"#"),n(" SQL调优")],-1),cn=l("li",null,[l("p",null,"SQL调优"),l("ul",null,[l("li",null,"首先禁止使用select *"),l("li",null,"用explian查看sql 语句是否命中索引，没有的话就修改sql，该加索引就加索引"),l("li",null,"避免使用or ，is null ，<> 操作符"),l("li",null,"复合索引和like语句要遵守最左匹配原则"),l("li",null,"字符串字段的话要加双引号")])],-1),hn={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_1-%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8D%E5%8F%8A%E4%BC%98%E5%8C%96sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},pn=l("ul",null,[l("li",null,"explian 一下SQL语句")],-1),Fn={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_2-%E5%A4%A7%E8%A1%A8%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%EF%BC%8C%E6%80%8E%E4%B9%88%E4%BC%98%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},wn=l("ul",null,[l("li",null,"优化sql语句，加索引"),l("li",null,"加Redis等缓存"),l("li",null,"主从复制，读写分离"),l("li",null,"垂直拆分，水平拆分")],-1),Cn={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_3-%E8%B6%85%E5%A4%A7%E5%88%86%E9%A1%B5%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86",target:"_blank",rel:"noopener noreferrer"},fn=l("ul",null,[l("li",null,[l("code",null,"select * from table where age > 20 limit 1000000"),n(",10 这种查询其实也是有可以优化的余地的. 这条语句需要 load1000000 数据然后基本上全部丢弃,只取 10 条当然比较慢. 当时我们可以修改为"),l("code",null,"select * from table where id in (select id from table where age > 20 limit 1000000,10)"),n(".这样虽然也 load 了一百万的数据,但是由于索引覆盖,要查询的所有字段都在索引中,所以速度会很快。")])],-1),yn={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_4-%E7%BB%9F%E8%AE%A1%E8%BF%87%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%90%97%EF%BC%9F%E5%AF%B9%E6%85%A2%E6%9F%A5%E8%AF%A2%E9%83%BD%E6%80%8E%E4%B9%88%E4%BC%98%E5%8C%96%E8%BF%87%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},gn=l("ul",null,[l("li",null,"我们一般sql耗时，一般都会在测试库里面测。慢查询统计主要是运维在做，会定期将业务中的慢查询反馈给我"),l("li",null,[n("慢首先要分析为什么慢？是不是加载了多余的列，sql语句没走索引，还是数据量太多？ "),l("ul",null,[l("li",null,"分析一下SQL，看看是不是load多余的列"),l("li",null,"explain下SQL语句，看看是不是没走索引，优化SQL使其尽量走索引"),l("li",null,"数据量太大的话可以分库分表")])])],-1),Dn={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_5-%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_6-%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_8-mysql%E6%95%B0%E6%8D%AE%E5%BA%93cpu%E9%A3%99%E5%8D%87%E5%88%B0500%E7%9A%84%E8%AF%9D%E4%BB%96%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://www.javalearn.cn/#/doc/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98?id=_9-%E5%A4%A7%E8%A1%A8%E6%80%8E%E4%B9%88%E4%BC%98%E5%8C%96%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},Sn=l("ul",null,[l("li",null,"限定范围查询"),l("li",null,"读写分离"),l("li",null,"分库分表")],-1),Qn=l("li",null,[l("p",null,"百万级别的数据如何删除"),l("ul",null,[l("li",null,"关于索引：索引"),l("li",null,"先删除索引（大概三分钟）"),l("li",null,"删除要删除的数据（看要删除的数据量，一般不超过两分钟）"),l("li",null,"重新建立刚删除的索引（数据量相对少了，建索引更快了）")])],-1),mn=l("p",null,"select a from table where b = 'xxx' group by c 如何建立索引",-1),vn=l("li",null,"联合索引bca ，bc是为了覆盖索引的同时避免filesort",-1),kn=l("li",null,"而a是为了避免回表查询",-1),jn={href:"https://blog.csdn.net/m0_46405589/article/details/112601638",target:"_blank",rel:"noopener noreferrer"},xn=E('<h2 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表" aria-hidden="true">#</a> 分库分表</h2><ul><li>什么是分库分表？ <ul><li>分库是指把一个数据库拆分成多个数据库，一般分为水平分库和垂直分库。</li><li>分表是指通过一定的规则，把一张表分解成多张不同的表，一般分为水平分表和垂直分表。 <ul><li>水平分表：就是一般意义的去分表，按行去分</li><li>垂直分表：把宽表拆成几张细表</li></ul></li></ul></li><li>分库和分表他们解决的问题有什么不一样 <ul><li>分库的目标主要解决的问题是：减少单一数据库的负债，提高数据库的并发能力，方便横向扩展。</li><li>分表解决的问题是：大表会导致性能差的问题（查询性能慢，写入压力大）</li></ul></li></ul><h2 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制" aria-hidden="true">#</a> 主从复制</h2><ul><li><p>为什么要主从复制</p><ul><li>提高Mysql性能，读写分离主写从读，分工，减少单机的压力</li></ul></li><li><p>MySQL主从复制的原理</p><ul><li>master节点修改的时候会把记录 记录到bin log</li><li>slave 节点会有一个IO线程去读取master的bin log</li><li>会在slave 节点生成一份Relay log</li><li>slave节点的SQL 线程会去读取这个Relay log，然后解析成SQL语句在slave库执行一遍</li></ul></li></ul><h2 id="mysql架构" tabindex="-1"><a class="header-anchor" href="#mysql架构" aria-hidden="true">#</a> MySQL架构</h2><ul><li>server层和引擎层各自的职责 <ul><li>Server层：负责处理客户端连接、解析查询请求、执行查询语句、管理事务、安全认证、并发控制以及其他管理任务。</li><li>存储引擎层负责将数据存储到磁盘上，并处理数据的读取和写入操作。</li></ul></li></ul><h2 id="数据库连接池" tabindex="-1"><a class="header-anchor" href="#数据库连接池" aria-hidden="true">#</a> 数据库连接池</h2><ul><li>数据库连接池有什么用 <ul><li>数据库连接池是一种池化技术，池化技术的核心思想是实现资源的复用，避免资源重复创建销毁的开销。</li><li>而在数据库的应用场景里面，应用程序每次向数据库发起 CRUD 操作的时候，都需要创建连接，在数据库访问量较大的情况下，频繁的创建连接会带来较大的性能开销。</li><li>而连接池的核心思想，就是应用程序在启动的时候提前初始化一部分连接保存到连接池里面，当应用需要使用连接的时候，直接从连接池获取一个已经建立好的链接。</li><li>连接池的设计，避免了每次连接的建立和释放带来的开销。</li></ul></li><li>数据库连接池参数有哪些 <ul><li>连接池初始化的时候会有几个关键参数： <ul><li>初始化连接数，表示启动的时候初始多少个连接保存到连接池里面</li><li>最大连接数，表示同时最多能支持多少连接，如果连接数不够，后续要获取连接的线程会阻塞。</li><li>最大空闲连接数，表示没有请求的时候，连接池中要保留的最大空闲连接。</li><li>最小空闲连接，当连接数小于这个值的时候，连接池需要再创建连接来补充到这个值。</li><li>最大等待时间，就是连接池里面的连接用完了以后，新的请求要等待的时间，超过这个时间就会提示超时异常。</li><li>无效连接清除，清理连接池里面的无效连接，避免使用这个连接操作的时候出现错误。</li></ul></li></ul></li></ul>',8);function qn(In,Tn){const e=r("ExternalLinkIcon");return t(),u("div",null,[A,s,l("ul",null,[l("li",null,[l("p",null,[l("a",B,[n("1. 数据库的三范式是什么？"),i(e)])]),d]),l("li",null,[l("p",null,[l("a",_,[n("2. MySQL 支持哪些存储引擎?"),i(e)])]),c]),l("li",null,[l("p",null,[l("a",h,[n("3. 超键、候选键、主键、外键分别是什么？"),i(e)])]),p]),l("li",null,[l("p",null,[l("a",F,[n("4. SQL 约束有哪几种？"),i(e)])]),w]),l("li",null,[l("p",null,[l("a",C,[n("5. MySQL 中的 varchar 和 char 有什么区别？"),i(e)])]),f]),l("li",null,[l("p",null,[l("a",y,[n("6. MySQL中 in 和 exists 区别"),i(e)])]),g]),l("li",null,[l("p",null,[l("a",D,[n("7. drop、delete与truncate的区别"),i(e)])]),L]),l("li",null,[l("p",null,[l("a",b,[n("8. 什么是存储过程？有哪些优缺点？"),i(e)])]),M]),l("li",null,[l("p",null,[l("a",S,[n("9. MySQL 执行查询的过程"),i(e)])]),Q]),m]),v,l("ul",null,[l("li",null,[l("p",null,[l("a",k,[n("1. 索引是什么？"),i(e)])]),j]),l("li",null,[l("p",null,[l("a",x,[n("2. 索引有哪些优缺点？"),i(e)])]),q]),l("li",null,[l("p",null,[l("a",I,[n("3. MySQL有哪几种索引类型？"),i(e)])]),T]),l("li",null,[l("p",null,[l("a",N,[n("4. 说一说索引的底层实现？"),i(e)])]),R]),V,l("li",null,[l("p",null,[l("a",O,[n("5. 为什么索引结构默认使用B+Tree，而不是B-Tree，Hash，二叉树，红黑树？"),i(e)])]),U]),l("li",null,[l("p",null,[l("a",z,[n("6. 讲一讲聚簇索引与非聚簇索引？"),i(e)])]),l("ul",null,[l("li",null,[l("a",P,[n("https://juejin.cn/post/6844903845554814983"),i(e)])])])]),l("li",null,[l("p",null,[l("a",H,[n("7. 非聚簇索引一定会回表查询吗？"),i(e)])]),K]),l("li",null,[l("p",null,[l("a",Y,[n("8. 联合索引是什么？为什么需要注意联合索引中的顺序？"),i(e)])]),G]),l("li",null,[l("p",null,[l("a",Z,[n("9. 讲一讲MySQL的最左前缀原则?"),i(e)])]),J]),l("li",null,[l("p",null,[l("a",W,[n("10. 讲一讲前缀索引？"),i(e)])]),X]),l("li",null,[l("p",null,[l("a",$,[n("11. 了解索引下推吗？"),i(e)])]),l("p",null,[l("a",ll,[n("Mysql性能优化：什么是索引下推？ - 知乎 (zhihu.com)"),i(e)])]),l("p",null,[l("a",nl,[n("五分钟搞懂MySQL索引下推 - 三分恶 - 博客园 (cnblogs.com)"),i(e)])]),el]),l("li",null,[l("p",null,[l("a",il,[n("12. 怎么查看MySQL语句有没有用到索引？"),i(e)])]),El]),l("li",null,[l("p",null,[l("a",ol,[n("13. 为什么官方建议使用自增长主键作为索引？"),i(e)])]),rl]),l("li",null,[l("p",null,[l("a",tl,[n("14. 如何创建索引？"),i(e)])]),ul]),l("li",null,[l("p",null,[l("a",al,[n("15. 创建索引时需要注意什么？"),i(e)])]),Al]),l("li",null,[l("p",null,[l("a",sl,[n("16. 建索引的原则有哪些？"),i(e)])]),Bl]),l("li",null,[l("p",null,[l("a",dl,[n("17. 使用索引查询一定能提高查询的性能吗？"),i(e)])])]),l("li",null,[l("p",null,[l("a",_l,[n("18. 什么情况下不走索引（索引失效）"),i(e)])]),cl]),hl,l("li",null,[pl,l("ul",null,[Fl,l("li",null,[l("a",wl,[n("https://zhuanlan.zhihu.com/p/379092178"),i(e)])])])])]),Cl,l("ul",null,[l("li",null,[l("a",fl,[n("1. 什么是数据库事务？"),i(e)]),yl]),l("li",null,[l("a",gl,[n("2. 介绍一下事务具有的四个特征"),i(e)]),Dl]),l("li",null,[l("a",Ll,[n("4. 什么是脏读？幻读？不可重复读？"),i(e)]),bl]),l("li",null,[l("a",Ml,[n("5. 事务的实现原理"),i(e)]),Sl]),Ql,ml]),vl,l("ul",null,[l("li",null,[l("a",kl,[n("6. MySQL事务日志介绍下？"),i(e)]),jl]),l("li",null,[l("a",xl,[n("7. 什么是MySQL的 binlog？"),i(e)]),n("(用于主从复制) "),ql]),l("li",null,[l("a",Il,[Tl,i(e)]),Nl]),l("li",null,[l("a",Rl,[n("9. MySQL中是如何实现事务隔离的?"),i(e)]),Vl]),l("li",null,[l("a",Ol,[n("10. 什么是 MVCC？"),i(e)]),Ul]),l("li",null,[l("a",zl,[n("11. MVCC 的实现原理"),i(e)]),Pl])]),Hl,l("ul",null,[l("li",null,[l("a",Kl,[n("3. 说一下MySQL 的四种隔离级别"),i(e)]),Yl]),Gl]),Zl,l("ul",null,[l("li",null,[l("p",null,[l("a",Jl,[n("1. 为什么要加锁?"),i(e)])]),Wl]),l("li",null,[l("p",null,[l("a",Xl,[n("2. 按照锁的粒度分数据库锁有哪些？"),i(e)])]),$l]),l("li",null,[l("p",null,[l("a",ln,[n("3. 从锁的类别上分MySQL都有哪些锁呢？"),i(e)])]),nn]),l("li",null,[l("p",null,[l("a",en,[n("4. 数据库的乐观锁和悲观锁是什么？怎么实现的？"),i(e)])]),En]),l("li",null,[l("p",null,[l("a",on,[n("5. InnoDB引擎的行锁是怎么实现的？"),i(e)])]),rn]),l("li",null,[l("p",null,[l("a",tn,[n("6. 什么是死锁？怎么解决？"),i(e)])]),un]),l("li",null,[l("p",null,[l("a",an,[n("7. 隔离级别与锁的关系"),i(e)])]),An]),l("li",null,[l("p",null,[l("a",sn,[n("8. 优化锁方面的意见？"),i(e)])]),Bn]),dn]),_n,l("ul",null,[cn,l("li",null,[l("p",null,[l("a",hn,[n("1. 如何定位及优化SQL语句的性能问题？"),i(e)])]),pn]),l("li",null,[l("p",null,[l("a",Fn,[n("2. 大表数据查询，怎么优化"),i(e)])]),wn]),l("li",null,[l("p",null,[l("a",Cn,[n("3. 超大分页怎么处理?"),i(e)])]),fn]),l("li",null,[l("p",null,[l("a",yn,[n("4. 统计过慢查询吗？对慢查询都怎么优化过？"),i(e)])]),gn]),l("li",null,[l("p",null,[l("a",Dn,[n("5. 如何优化查询过程中的数据访问"),i(e)])])]),l("li",null,[l("p",null,[l("a",Ln,[n("6. 如何优化关联查询"),i(e)])])]),l("li",null,[l("p",null,[l("a",bn,[n("8. MySQL数据库cpu飙升到500%的话他怎么处理？"),i(e)])])]),l("li",null,[l("p",null,[l("a",Mn,[n("9. 大表怎么优化？"),i(e)])]),Sn]),Qn,l("li",null,[mn,l("ul",null,[vn,kn,l("li",null,[l("a",jn,[n("https://blog.csdn.net/m0_46405589/article/details/112601638"),i(e)])])])])]),xn])}const Vn=o(a,[["render",qn],["__file","MySQL.html.vue"]]);export{Vn as default};
