import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as n,c as t,b as l,d as i,e as u,f as a}from"./app-c550aa6e.js";const s={},p=l("h1",{id:"jvm",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#jvm","aria-hidden":"true"},"#"),i(" JVM")],-1),c=l("h2",{id:"对象问题",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#对象问题","aria-hidden":"true"},"#"),i(" 对象问题")],-1),d=a('<li><p>对象创建的主要流程</p><ul><li>虚拟机遇到一条new指令时，先检查常量池是否已经加载相应的类，如果没有，必须先执行相应的类加载。</li><li>类加载通过后，接下来分配内存。 <ul><li>若Java堆中内存是绝对规整的，使用“指针碰撞“方式分配内存； <ul><li>指针碰撞：如果Java堆的内存是规整，指针指示器向空闲的内存移动一段与对象大小相等的距离</li></ul></li><li>如果不是规整的，就从空闲列表中分配，叫做”空闲列表“方式。 <ul><li>虚拟机维护一个列表来记录可用的内存，在分配的时候可以从列表中查询到足够大的内存分配给对象，接着更新列表记录。</li></ul></li><li>划分内存时还需要考虑一个问题-并发，也有两种方式: <ul><li>CAS同步处理，</li><li>本地线程分配缓冲(Thread Local Allocation Buffer, TLAB)。</li></ul></li></ul></li><li>然后内存空间初始化操作，接着是做一些必要的对象设置(元信息、哈希码…)，最后执行方法。</li></ul></li><li><p>对象分配内存的并发安全问题</p><ul><li>对象的创建是一个非常频繁的行为，可能会出现 正在给对象 A 分配内存，指针还没来得及修改，对象 B 又同时使用了原来的指针来分配内存 的情况。解决这个问题有两种方案： <ul><li>对分配内存空间的动作进行同步处理（采用 CAS + 失败重试来保障更新操作的原子性）；</li><li>把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在 Java 堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer, TLAB）。哪个线程要分配内存，就在哪个线程的 TLAB 上分配。只有 TLAB 用完并分配新的 TLAB 时，才需要同步锁。通过-XX:+/-UserTLAB参数来设定虚拟机是否使用TLAB。</li></ul></li></ul></li><li><p>对象的访问定位</p><ul><li>Java程序需要通过 JVM 栈上的引用访问堆中的具体对象。对象的访问方式取决于 JVM 虚拟机的实现。目前主流的访问方式有 句柄 和 直接指针 两种方式。 <ul><li>指针： 指向对象，代表一个对象在内存中的起始地址。</li><li>句柄： 可以理解为指向指针的指针，维护着对象的指针。句柄不直接指向对象，而是指向对象的指针（句柄不发生变化，指向固定内存地址），再由对象的指针指向对象的真实内存地址。</li></ul></li></ul></li><li><p>直接指针</p><figure><img src="https://secure2.wostatic.cn/static/bPBBGnBPVPYUSgFBQfKLUd/image.png?auth_key=1691509572-nrDjkFUdrzUUKxERcbHjWd-0-081cd3ea8128783f5eff8f0f752f0780" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>如果使用直接指针访问，引用 中存储的直接就是对象地址，那么Java堆对象内部的布局中就必须考虑如何放置访问类型数据的相关信息。</li><li>优势：速度更快，节省了一次指针定位的时间开销。由于对象的访问在Java中非<br> 常频繁，因此这类开销积少成多后也是非常可观的执行成本。 HotSpot 中采用<br> 的就是这种方式。</li></ul></li><li><p>句柄</p><figure><img src="https://secure2.wostatic.cn/static/5uJhnJtkXH3pVbUX9oMVnn/image.png?auth_key=1691509572-qeCFTpbiyVEwk1cUuqBJFT-0-10114e15250cded8950df9c621432c7c" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Java堆中划分出一块内存来作为句柄池，引用中存储对象的句柄地址，而句柄中包含了对象实例数据与对象类型数据各自的具体地址信息</li><li>优势：引用中存储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而引用本身不需要修改。</li></ul></li><li><p>什么是指针碰撞</p><ul><li>一般情况下， JVM的对象都放在堆内存中（发生逃逸分析除外）。当JVM为新对象分配内存时，如果Java堆中内存是绝对规整的，所有被使用过的的内存都被放到一边，空闲的内存放到另外一边，中间放着一个指针作为分界点的指示器，所分配内存仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的实例，这种分配方式就是 指针碰撞。</li></ul></li><li><p>什么是空闲列表</p><ul><li>如果Java堆内存中的内存并不是规整的，不可以进行指针碰撞</li><li>虚拟机必须维护一个列表，记录哪些内存是可用的，在分配的时候从列表找到一块大的空间分配给对象实例，并更新列表上的记录，这种分配方式就是空闲列表。</li></ul></li><li><p>什么是TLAB</p><ul><li>把内存分配的动作按照线程划分在不同的空间之中进行，每个线程在Java堆中预先分配一小块内存,这就是TLAB</li></ul></li><li><p>对象栈分配</p><ul><li>首先要讲一下方法逃逸：当JVM发现，当前对象只会在某个方法块里使用，那么我们就说它逃逸分析了</li><li>对于满足逃逸分析的对象，那么JVM对于该对象分配内存会分配到栈上，减少堆GC的压力</li></ul></li>',9),h=l("p",null,"逃逸分析",-1),g={href:"https://bbs.huaweicloud.com/blogs/274124",target:"_blank",rel:"noopener noreferrer"},C={href:"https://zhuanlan.zhihu.com/p/59215831",target:"_blank",rel:"noopener noreferrer"},v=l("li",null,"当JVM发现，当前对象只会在某个方法块里使用，那么我们就说它逃逸分析了",-1),M=l("li",null,"Java的逃逸分析只发在JIT的即时编译中",-1),J=l("li",null,"-XX:+DoEscapeAnalysis表示开启逃逸分析，JDK8是默认开启的",-1),f=l("li",null,"科普：JDK 6 Update 23默认开启，在某些版本（如JDK 6 Update 18）中还曾完全禁止这项优化",-1),m=l("li",null,[l("p",null,"对象具体包含哪些内容"),l("ul",null,[l("li",null,[i("对象头 "),l("ul",null,[l("li",null,"对象运行所需要的数据，称为Mark Work，具体内容包含：对象hashcode、分代年龄、轻量级锁指针、重量级锁指针、GC标记、偏向锁线程ID、偏向锁时间戳。"),l("li",null,"存储类型指针，通过这个指针知道对象是属于哪个类的。")])]),l("li",null,"实例数据"),l("li",null,"对齐填充")])],-1),S=a('<h2 id="内存结构" tabindex="-1"><a class="header-anchor" href="#内存结构" aria-hidden="true">#</a> 内存结构</h2><ul><li><p>JVM的主要组成部分</p><figure><img src="https://secure2.wostatic.cn/static/doGocKJ7buuFrtKyCYS15Z/image.png?auth_key=1691509572-4nADXcZsfDZA9QX2QGmrTA-0-3b04c071943f3430276594dcd9d3f67b" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>JVM包含两个子系统和两个组件： <ul><li>子系统：Class loader(类装载)，Execution engine(执行引擎)。</li><li>两个组件：Runtime data area(运行时数据区)、 Native Interface(本地接口)</li></ul></li><li>Class loader(类装载)：根据给定的全限定名类名来装载class文件到运行时数据区中的方法区。</li><li>Execution engine：字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎。</li><li>Native Interface：与native libraries交互</li><li>Runtime data area(运行时数据区域)：这就是我们常说的JVM的内存结构</li></ul></li><li><p>JVM内存结构（Java运行时数据区）</p><ul><li>分为线程私有和线程共享 <ul><li>线程私有的有：程序计数器，虚拟机栈，本地方法栈</li><li>线程共享的有：堆，方法区</li></ul></li><li>程序计数器：工作线程数量大于CPU内核数的时候，就会发生上下文切换，这时候就要一个计数器来记录当前线程的下一个字节码位置。</li><li>虚拟机栈：每次调用线程方法的时候都会创建一个栈帧，存放了线程方法的临时变量表，动态链接，操作数栈，方法返回值，返回地址等。调用方法时入栈，方法返回时出栈。</li><li>本地方法栈：跟虚拟机栈类似，只不过虚拟机栈是针对于java方法的，而本地方法栈是针对于native方法的。</li><li>堆：最大的内存空间，创建的对象都放到这里。分为年轻代，老年代，永久代（永久代JDK1.8改为元空间），其中年轻代又分为Eden区，Suvivor from和Suvivor to区。创建的小对象首先会放到Eden区，1次GC后会把存活的对象转移到S0区，再经过一次GC后转移到S1区，15次后还存活的对象会转移到老年区。内存不够会OOM</li><li>方法区：存放被虚拟机加载的类的元信息，如常量，静态变量和即时编译器编译后的代码。内部的运行时常量池存放编译后的常量。</li></ul></li><li><p>虚拟机栈中的栈帧的内部结构</p><ul><li>局部变量表：存放编译期的各种数据类型，对象引用</li><li>操作数栈：存放方法计算过程中产生的计算结果</li><li>动态链接：主要服务的是一个方法调用其他方法的场景。在java代码被编译为class文件时，所有变量和方法引用都作为符号引用保存在class文件里。在一个方法需要调用其他方法的时候，需要将类常量池中的方法符号引用改为方法的直接引用（实际地址）。</li><li>方法返回地址</li></ul></li><li><p>关于栈OOM的问题</p><ul><li>在有些虚拟机中，栈是可以动态扩容的，比如早期的classic，如果无法申请到内存，那么就会抛出OOM异常。</li><li>有些虚拟机的栈是无法动态扩容的，比如Hotspot，那么不会抛出OOM，只会抛出SOF.</li></ul></li><li><p>JMM</p><ul><li>规范：JMM 是和多线程相关的一组规范，需要各个 JVM 的实现来遵守 JMM 规范，以便于开发者可以利用这些规范，更方便地开发多线程程序。</li><li>作用：JMM屏蔽掉各种硬件和操作系统的内存访问差异，以实现让java程序在各种平台下都能达到一致的并发效果。</li><li>定义：Java内存模型规定<strong>所有的变量都存储在主内存</strong>中，包括实例变量，静态变量，但是不包括局部变量和方法参数。每个线程都有自己的工作内存，<strong>线程的工作内存保存了该线程用到的变量和主内存的副本拷贝，线程对变量的操作都在工作内存中进行</strong>。<strong>线程不能直接读写主内存中的变量</strong>。</li></ul><p>JMM定义了什么？</p><ul><li>JMM围绕着三个特征建立起来的 , 分别是：原子性，可见性，有序性。这三个特征可谓是整个Java并发的基础。</li></ul></li><li><p>JVM中的常量池</p><ul><li>Class文件常量池：编译的时候，就把.java文件编译成.class文件存放到磁盘，.class文件包括class文件常量池。</li><li>运行时常量池：运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</li><li>字符串常量池</li></ul></li></ul><h2 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区" aria-hidden="true">#</a> 方法区</h2><ul><li><p>方法区</p><ul><li>概念：存储类信息的一块内存区域，是JVM的一块组成部分。</li><li>存储什么？ <ul><li>类型信息（域信息，方法信息）</li><li>静态变量</li><li>运行时常量池</li><li>JIT热点代码</li></ul></li><li>版本迭代的变化 <ul><li>JDK6以前，具体实现为永久代，静态变量存储在永久代</li><li>JDK7 永久代依然存在，但是字符串常量池和静态变量转移到堆中</li><li>JDK8 删除永久代，元空间代替。元空间使用的是直接内存，存储类型信息，常量，方法，字段。字符串常量池和静态变量依然在堆中。</li></ul></li></ul></li><li><p>为什么将永久代替换为元空间（深入理解Java虚拟机的内容）</p><ul><li>如果动态加载的类比较多，容易产生OOM。虽然可以通过调参来设置永久代的大小，但是也不好管理。</li><li>而元空间使用的是直接内存，maxMetaspaceSize默认值为-1</li><li>有极少数方法（例如String::intern()）会因永久代的原因而导致不同虚拟机下有不同的表现。</li><li>想要从其他虚拟机移植优秀功能有困难，因为方法区实现上有差异，为了更好的发展，取消了永久代</li></ul></li><li><p>JDK7为什么将字符串常量池从永久代移到堆空间中</p><ul><li>因为字符串常量池使用频率较高，像之前被放置在永久代中被回收的概率就比较低，导致永久代空间不够用，放在堆中，能够及时回收。</li></ul></li><li><p>方法区可以实现垃圾回收吗</p><ul><li>回收的主要是废弃常量和无用的类、 <ul><li>无用的类的条件： <ul><li>堆不存在该类的实例</li><li>加载该类的类加载器被回收了</li><li>不存在该类对应的Class对象</li></ul></li></ul></li></ul></li><li><p>JDK8中，字符串常量池不在元空间中，字符串常量池在JDK7中已经移到堆中，JDK8元空间存放的是字符串常量的引用</p></li></ul><h2 id="类加载相关" tabindex="-1"><a class="header-anchor" href="#类加载相关" aria-hidden="true">#</a> 类加载相关</h2><p>类的加载机制（类的生命周期和双亲委派机制吧）</p>',6),G=l("li",null,[l("p",null,"类的生命周期"),l("ul",null,[l("li",null,"类的生命周期：加载、验证、准备、解析、初始化、使用和卸载。而验证、准备、解析又称为连接。"),l("li",null,[i("类加载过程：加载、验证、准备、解析、初始化 "),l("ul",null,[l("li",null,"加载：通过完成限定名去加载class文件，生成class对象"),l("li",null,"验证：验证class的合法性，不会影响JVM安全"),l("li",null,"准备: 为static变量分配内存，初始化值。"),l("li",null,"解析：把符号引用改为直接引用"),l("li",null,"初始化：是调用类的构造器过程")])])])],-1),b={href:"https://www.bilibili.com/video/BV1Gt4y1b7Xi",target:"_blank",rel:"noopener noreferrer"},_=a("<li><p>双亲委派机制</p><ul><li>首先要讲一下类加载器，类加载器自上而下分为4个部分： <ul><li>Bootsrap类加载器，加载的是rt.jar包等核心类</li><li>ext类加载器，加载的是ext包的类</li><li>system类加载器，加载的是classpath下的类</li><li>用户自定义加载器，用户自定义</li></ul></li><li>双亲委派机制就是，每次加载类请求都会委派给父类加载器去加载，加载到就返回，加载不到就向下转派去加载 <ul><li>好处：避免类的重复加载，保护核心API被修改，如果我们自己写个String类，然后类先加载我们的类，而我们写的类又不规范，那么整个系统将崩溃</li></ul></li><li>如何打破双亲委派机制：继承classLoader类，重写loadClass和findClass方法。</li></ul></li><li><p>Tomcat的类加载机制</p><ul><li>先加载每个webapp下的classpath的类，加载不到再向上委派</li></ul></li><li><p>Tomcat为什么要打破双亲委派机制</p><ul><li>Tomcat是个存放多个webapp的容器，而不同容器需要加载不同版本的jar包，所以就要打破这种机制。（简单介绍）</li><li>详细介绍看下： <ul><li>我们在使用Tomcat的时候，可以部署多个war包，每个war包分别代表了不同WebApp，可以通过不同的context-path来区分。</li><li>这个时候会有一个问题，如果两个war包中有相同名称的两个类，譬如都是User，但是它们的实现版本却不一样，譬如一个有userld字段，另一个却没有。</li><li>Tomcat为了保证它们不会冲突，会为每个WebApp创建一个类加载器实例。对应的类型是WebAppClassLoader，它覆盖了loadClass(..)方法。会优先加载目录/WEB-INF/classes,以及/WEB-INF/lib 中的jar包。只有在找不到类的时候才会向上委派。</li></ul></li></ul></li><li><p>JDBC为什么要打破双亲委派机制</p></li><li><p>类加载器的依赖传递原则</p><ul><li>类C由类加载器CL加载，那么类C所依赖的类都由类加载器CL加载。当然，如果类C引用了String类，作为核心类，自然最终会委派给BootStrap类加载器加载。</li></ul></li><li><p>什么叫打破双亲委派机制</p><ul><li>只要不按照约定：UserClassLoader→APPClassLoader→ExtClassLoader→BootstrapClassLoader</li><li>就算打破双亲委派机制</li></ul></li><li><p>如何自定义类加载器</p><ul><li>继承ClassLoader</li><li>如果不想打破双亲委派模型，那么只需要重写findClass方法即可</li><li>如果想打破双亲委派模型，那么就重写整个loadClass方法</li></ul></li>",7),V=a('<h2 id="gc相关" tabindex="-1"><a class="header-anchor" href="#gc相关" aria-hidden="true">#</a> GC相关</h2><ul><li><p>java中的四种引用</p><ul><li>强引用：发生gc不会被回收</li><li>软引用：内存溢出的时候才会被gc回收</li><li>弱引用：下一次gc的时候被回收</li><li>虚引用：用PhantomReference实现虚引用，虚引用的用途是在gc时候返回一个通知。</li></ul></li><li><p>Java 中 WeakReference 与 SoftReference 的区别？</p><ul><li>虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候。</li></ul></li><li><p>如何判断对象可以被回收？</p><ul><li>首先，垃圾回收器会去判断一个对象是否存活或者死亡，死亡的对象会被标记为等待清除。</li><li>而判断对象是否为死亡有两种算法：引用计数器算法和可达性分析算法 <ul><li>引用计数器算法：创建对象的时候会设置一个计数器，对象被使用+1，使用完后-1，为0表示没有被使用，则标记为可清除。 <ul><li>优点：实时性比较高，缺点就是无法解决循环引用的问题。</li></ul></li><li>可达性分析算法： <ul><li>指的是从对象的起点，即GC Roots开始向下搜索，如果对象到GC Roots没有任何引用链相连时，也就是说对象到GC Roots 不可达，表明此对象可以被回收。</li></ul></li></ul></li></ul></li><li><p>垃圾回收算法有哪些</p><ul><li>标记-清除算法：先标记需要清理的对象，所有都标记完后一次性清理掉</li><li>复制算法：将内存分为两块大小一样的空间，每次只使用一块，把一边还存活的对象移动另一边，然后清理掉这一边的空间</li><li>标记-整理：让存活的对象向一端移动，清掉端边界以外的空间</li><li>分代收集算法：把堆分为新生代和老年代，这样就可以根据各个年代的特点采用适合的垃圾收集算法</li></ul></li><li><p>老年代和年轻代分别用什么算法？为什么</p><ul><li>年轻代 <ul><li>适合复制算法，也会发生stop the world</li></ul></li><li>老年代 <ul><li>标记-整理算法，不能使用复制算法，因为老年代需要放比较多的对象，不能使用复制算法浪费空间。而老年代gc的频率比年轻代gc频率低很多，使用标记整理算法比较合适。</li><li>当然，也可以使用标记-清除算法（CMS），但是会产生过多的碎片。当碎片达到一定程度导致分配不了内存时，可以借助一些使用了标记整理的垃圾回收器整理一下内存空间(CMS 报错时候借助Serial Old )。</li></ul></li></ul></li><li><p>新生代细分</p><ul><li>分为eden，survivor from ，survivor to区，默认比例是8:1:1</li></ul></li><li><p>两种垃圾回收类型：Minor GC 和 Full GC</p><ul><li>Minor GC <ul><li>只对新生代进行回收，不会影响老年代。</li><li>因为java对象在新生代死亡频繁，所以需要一种速度快的算法，使垃圾回收尽快完成。</li></ul></li><li>Full GC <ul><li>Full GC 也叫Major GC，对整个堆进行回收。包括新生代，老年代和永久代。</li><li>速度相对于Minor 更慢。</li><li>导致Full GC的原因： <ul><li>老年代或永久代满了</li><li>System.gc()被显式调用</li></ul></li></ul></li></ul></li><li><p>Minor GC 和 Full GC的触发条件</p><ul><li>Minor GC触发条件：Eden区满了触发</li><li>Full GC 触发条件： <ul><li>通过Minor GC进到到老年代，发现老年代内存不够</li><li>老年代空间不足</li><li>调用System.gc,系统建议Full GC，但是不一定执行</li></ul></li></ul></li><li><p>Stop-the-World</p><ul><li>运行垃圾回收的过程中，会涉及对象的移动。为了保证对象引用更新的正确性，必须暂停所有的用<br> 户线程，像这样的停顿，虚拟机设计者形象描述为「Stop The World」。也简称为STW</li></ul></li><li><p>安全点</p><ul><li>程序执行时并非在任意位置都能够在停顿下来开始垃圾收集。必须到达特定位置，才能够执行GC。这个特定的位置就叫做安全点。</li><li>特点的位置有： <ul><li>循环的末尾</li><li>方法返回前</li><li>可能抛异常的位置</li></ul></li></ul></li><li><p>用代码能保证GC的执行吗？</p><ul><li>不能，虽然可以调用System.gc()和Runtime.gc()，但是没办法保证GC的执行。</li></ul></li><li><p>怎么通过java代码来获取jvm的使用内存？堆的百分比？</p><ul><li>可以通过 java.lang.Runtime类中与内存相关的方法来获取剩余内存，总内存，和最大堆内存。</li></ul></li><li><p>32位和64位的JVM中，int的长度是多少字节？</p><ul><li>因为JVM与平台无关，所以不管在32位还是64位，int类型都是32位，也就是4个字节。</li></ul></li><li><p>Spring 容器中的Bean是否会被GC？</p><ul><li>看情况，如果是单例，它内部被ConcurrentHashMap所存储，而key又是强引用，gcroot可达，那么永远不会被gc回收。</li><li>如果是prototype, 如果gc可达，那么就不会被回收，如果不可达，就会被回收。</li></ul></li><li><p>三色标记算法</p><ul><li>JVM中的<strong>CMS、G1垃圾回收器</strong>所使用垃圾回收算法即为三色标记法。</li><li>三色标记法将对象的颜色分为了黑、灰、白，三种颜色。 <ul><li><strong>白色</strong>：该对象没有被标记过。（垃圾对象）</li><li><strong>灰色</strong>：该对象已经被标记过了，但该对象下的属性没有全被标记完。（GC需要从此对象中去寻找垃圾）</li><li><strong>黑色</strong>：该对象已经被标记过了，且该对象下的属性也全部都被标记过了。（程序所需要的对象）</li></ul></li><li>流程： <ul><li>首先创建三个集合：白、灰、黑</li><li>将所有对象放入白色集合中</li><li>然后从根节点开始遍历所有对象，把遍历到的对象从白色集合放入灰色集合</li><li>之后遍历灰色集合，将灰色对象引用的对象从白色集合放入灰色集合，之后将此灰色对象放入黑色集合</li><li>通过write-barrier检测对象有变化</li><li>清除所有白色对象</li></ul></li><li>三色标记存在的问题 <ul><li>浮动垃圾 <ul><li>并发标记的过程中，若一个已经被标记成黑色或者灰色的对象，突然变成了垃圾，由于不会再对黑色标记过的对象重新扫描,所以不会被发现，所以成为了浮动垃圾，浮动垃圾对系统的影响不大，留给下一次GC进行处理即可</li></ul></li><li>对象漏标问题 <ul><li>并发标记的过程中，一个业务线程将一个未被扫描过的白色对象断开引用成为垃圾（删除引用），同时黑色对象引用了该对象（增加引用）（这两部可以不分先后顺序）；因为黑色对象的含义为其属性都已经被标记过了，重新标记也不会从黑色对象中去找，导致该对象被程序所需要，却又要被GC回收，此问题会导致系统出现问题</li><li>而CMS与G1，两种回收器在使用三色标记法时，都采取了一些措施来应对这些问题，CMS对增加引用环节进行处理（Increment Update），G1则对删除引用环节进行处理(SATB)</li></ul></li></ul></li></ul></li></ul><h2 id="垃圾收集器" tabindex="-1"><a class="header-anchor" href="#垃圾收集器" aria-hidden="true">#</a> 垃圾收集器</h2><ul><li><p>垃圾回收器有哪些</p><ul><li>7种作用于不同分代的收集器，其中用于回收新生代的收集器包括Serial、PraNew、Parallel Scavenge，回收老年代的收集器包括Serial Old、Parallel Old、CMS，还有用于回收整个Java堆的G1收集器。</li></ul><figure><img src="https://secure2.wostatic.cn/static/f2PfYTUNQGEZBgqWy3ZNjH/image.png?auth_key=1691509572-jYaGWiPiwpfXac4HhSmxnq-0-b5eb1e90f572b596065156d74f67fe58" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？ <ul><li>新生代回收器：Serial、ParNew、Parallel Scavenge</li><li>老年代回收器：Serial Old、Parallel Old、CMS</li><li>整堆回收器：G1</li><li>新生代垃圾回收器一般采用的是复制算法，复制算法的优点是效率高，缺点是内存利用率低；老年代回收器一般采用的是标记-整理的算法进行垃圾回收。</li></ul></li></ul></li><li><p>详细介绍一下 CMS 垃圾回收器？</p><ul><li>CMS 是英文的全程是 Concurrent Mark-Sweep ，它以牺牲吞吐量为代价来获得最短回收停顿时间。</li><li>CMS 使用的是标记-清除的算法实现的，所以在 gc 后会产生大量的内存碎片，当碎片过多的时候导致无法分配内存，系统将会出现Concurrent Mode Failure（并发失败），这时会借助 使用标记-整理算法的Serial Old 回收器进行垃圾清除。</li><li>分为四个步骤，包括： <ul><li>初始标记（CMS initial mark） 会STF</li><li>并发标记（CMS concurrent mark）</li><li>重新标记（CMS remark） 会STF</li><li>并发清除（CMS concurrent sweep）</li></ul></li><li>缺点： <ul><li>1.多碎片</li><li>2.利用系统的线程资源，降低系统吞吐量</li><li>3.会并发失败（Concurrent Mode Failure），导致full gc</li></ul></li></ul></li><li><p>G1收集器</p><ul><li>G1全名叫：Garbage first</li><li>G1收集器开创了收集器 面向局部收集 的设计思路和基于Region的内存布局形式</li><li>在G1收集器出现之前的所有其他收集器,垃圾收集的目标范围要么是整个新生代,要么就是整个老年代,再要么就是整个Java堆。而G1跳出了这个限制,它可以面向堆内存任何部分来组成回收集进行回收,衡量标准不再是它属于哪个分代,而是哪块内存中存放的垃圾数量最多,回收收益最大,这就是G1收集器的Mixed GC模式。</li><li>G1不再坚持固定大小以及固定数量的分代区域划分,而是把连续的Java堆划分为多个大小相等的独立区域（Region）,每一个Region都可以根据需要,扮演新生代的Eden空间、Survivor空间,或者老年代空间。</li><li>此外,还有一类专门用来存储大对象的特殊区域（Humongous Region）。G1认为只要超过了Region一半的对象即可判定为大对象。而对于那些超过了整个Region容量的超级大对象,将会被存放在N个连续的Humongous Region之中,G1的大多数行为都把Humongous Region作为老年代的一部分来进行看待。</li></ul></li><li><p>G1 收集器</p><ul><li>G1全名叫：Garbage first</li><li>G1收集器开创了收集器 面向局部收集 的设计思路和基于Region的内存布局形式</li><li>传统收集器都是按分代的理论，把堆分成年轻代，老年代。而G1不走寻常路，它把堆分成大小一样的Region区域。Region区可以在回收过程中可以根据需要扮演年轻代老年代的角色。</li><li>G1收集器的局部收集思想主要是指它只回收垃圾比较多的Region区，所以效益是比较高的，这也叫做Mixed GC模式。</li></ul></li><li><p>简述分代垃圾回收器是怎么工作的？</p><ul><li>分代回收器有两个分区：老生代和新生代，新生代默认的空间占比总空间的 1/3，老生代的默认占比是 2/3。</li><li>新生代使用的是复制算法，新生代里有 3 个分区： Eden、 To Survivor、 From<br> Survivor，它们的默认占比是 8:1 :1。它的执行流程如下： <ul><li>把 Eden + From Survivor 存活的对象放入 To Survivor 区；</li><li>清空 Eden 和 From Survivor 分区；</li><li>From Survivor 和 To Survivor 分区交换， From Survivor 变 To Survivor， To <br> Survivor 变 From Survivor。</li></ul></li><li>每次在 From Survivor 到 To Survivor 移动时都存活的对象，年龄就 + 1，当年龄到达 1 5（默认配置是 15，可以调小，15是最大值）时，升级为老生代。</li><li>大对象也会直接进入老生代。老生代当空间占用到达某个值之后就会触发全局垃圾收回，一般使用标记整理的执行算法。</li></ul></li><li><p>Serial 与 Parallel GC之间的区别？</p><ul><li>相同的是，它们在GC的时候会引起stop-the-world</li><li>不同的是，serial 收集器是默认的复制收集器，执行GC的时候只有一个线程，而paraller收集器使用多个GC线程来执行。</li></ul></li></ul><h2 id="性能调优" tabindex="-1"><a class="header-anchor" href="#性能调优" aria-hidden="true">#</a> 性能调优</h2><ul><li><p>JVM性能调优参数</p><ul><li>-Xms 设置初始堆的大小</li><li>-Xmx 设置 最大堆的大小</li><li>-Xmn设置年轻代大小</li><li>-Xss 每个线程的大小</li><li>-XX:NewSize：新生代大小</li><li>-XX:NewRatio 年轻代与年老代的比值</li><li>-XX:SurvivorRatio：伊甸园空间和幸存者空间的占比</li><li>设定垃圾回收器 <ul><li>年轻代用 -XX:+UseParNewGC</li><li>年老代用-XX:+UseConcMarkSweepGC</li></ul></li></ul></li><li><p>调优工具</p><ul><li>常用的调优工具分为两类 <ul><li>jdk 自带监控工具：jconsole和jvisualvm</li><li>第三方：MAT,GChisto</li></ul></li><li>jconsole，用于监控JVM中的内存，线程和类信息</li><li>jvisualvm，可以分析内存快照、线程快照，内存变化</li><li>MAT，一个基于Eclipse的内存分析工具，可以帮助我们查找内存泄漏和减少内存消耗。</li><li>GChisto,一款专业分析gc日志的工具</li><li>jps，显示制定系统内所有的java进程。</li><li>jmap，用于生成堆的dump文件</li><li>jhat：与jmap搭配使用，用来分析jmap生成的dump文件，jhat内置了一个服务器，生成dump的分析结果后，可以在浏览器查看</li><li>jstack，用于生成java虚拟机当前的线程快照</li><li>jinfo，这个命令作用是实时查看和调整虚拟机运行参数</li></ul></li><li><p>什么是JVM内存抖动，如何解决</p><p>JVM内存抖动是指JVM在进行垃圾回收时，由于对象的创建和销毁不平衡，导致内存的使用频繁地从新生代和老年代之间切换，从而导致系统的性能下降和响应时间延长的现象。</p><p>解决JVM内存抖动的方法包括：</p><ol><li>调整JVM的堆大小，增加新生代和老年代的比例，使得垃圾回收更加平衡。</li><li>优化代码，减少对象的创建和销毁，避免频繁地进行垃圾回收。</li><li>使用对象池技术，重复利用对象，减少对象的创建和销毁。</li><li>使用GC日志分析工具，查看垃圾回收的情况，找出内存抖动的原因，进行优化。</li><li>使用CMS垃圾回收器或G1垃圾回收器，这些垃圾回收器可以更好地处理内存抖动问题。</li></ol></li></ul><h2 id="生产问题" tabindex="-1"><a class="header-anchor" href="#生产问题" aria-hidden="true">#</a> 生产问题</h2><ul><li>生产环境发生CPU标高，怎么解决的呢？ <ul><li>发生CPU标高的原因有很多</li><li>可能我们的代码写了一些CAS循环，它可能会不断做一些重试，进而引发CPU标高的问题</li><li>也有可能，我们代码层面写了一些Bug，造成一些死循环，从而导致CPU空转问题。</li><li>再比如，我以前的云服务器，使用了Redis，然后这个Redis被别人黑客做了一些挖矿程序，导致我们CPU使用率较高的问题，因为挖矿是非常消耗我们的CPU资源的</li><li>也有可能被黑客进行DDoS攻击了，疯狂的向我们服务器发送请求，导致我们服务器压力比较大。</li><li>一般情况下，我们服务器，一般会有告警监控系统，会通过通知我们，让我们去排查一下。</li></ul></li><li>CPU标高怎么解决 <ul><li>首先，在我们服务器找到哪个进程CPU使用率比较高。可以使用top指令。</li><li>找到进程后，再通过jstack命令导出jstack文件，查看哪个线程占用比较高。再通过这个线程名称再去搜索我们的java代码。然后就可以开始分析代码层了。</li><li>我们一般使用多线程或者线程池的情况下，一定要指定我们的线程名字。可以方便我们排查线程问题。</li></ul></li></ul><p>对象的创建在虚拟机中是一个非常频繁的行为，哪怕只是修改一个指针所指向的位置，在并发情况下也是不安全的，可能出现正在给对象 A 分配内存，指针还没来得及修改，对象 B 又同时使用了原来的指针来分配内存的情况。解决这个问题有两种方案：</p><h2 id="jit问题" tabindex="-1"><a class="header-anchor" href="#jit问题" aria-hidden="true">#</a> JIT问题</h2><ul><li><p>为什么需要JIT</p><ul><li>JIT，也就是Java的即时编译。</li><li>Java是一门半编译半解释的一门语言，Java代码编译成字节码，运行的时候字节码解释成机器码</li><li>JVM跑久之后，热点代码的执行次数达到一定的阈值的时候，它会编译成更底层的机器码，节省了每次都要解释的时间，所以执行效率都会更高</li></ul></li><li><p>为什么应用不启动的时候就把它编译成机器码呢</p><ul><li>其实这样主要是为了考虑一个性能的开销</li><li>如果这样做的话，整个应用程序启动会非常的慢，文件大小也会变得更大</li><li>而代码也符合二八定律，也就是说20%的代码完成了80%的调用、</li><li>所以，动态的去识别热点代码，性价比会高一些</li></ul></li><li><p>JIT的分层编译</p><ul><li>编译器有client、server两种 <ul><li>client 启动速度快，编译效率低。代表：c1编译器</li><li>client 启动速度慢，编译效率高。代表：c2编译器，graal编译器</li></ul></li><li>分两层：代码先由client编译，随着代码变热，由server编译器重新编译。jdk8默认开启分层编译。</li></ul></li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><ul><li>main方法的执行，JVM会做什么事情（没整理好） <ul><li>加载main方法所在的类</li><li>在虚拟机栈中，创建一个栈帧</li><li>方法执行完，出栈</li></ul></li></ul>',13);function T(j,x){const e=o("ExternalLinkIcon");return n(),t("div",null,[p,c,l("ul",null,[d,l("li",null,[h,l("ul",null,[l("li",null,[l("a",g,[i("https://bbs.huaweicloud.com/blogs/274124"),u(e)])]),l("li",null,[l("a",C,[i("https://zhuanlan.zhihu.com/p/59215831"),u(e)]),i(" 有讲到方法逃逸和线程逃逸")]),v,M,J,f])]),m]),S,l("ul",null,[G,l("li",null,[l("p",null,[l("a",b,[i("https://www.bilibili.com/video/BV1Gt4y1b7Xi"),u(e)])])]),_]),V])}const k=r(s,[["render",T],["__file","JVM.html.vue"]]);export{k as default};
